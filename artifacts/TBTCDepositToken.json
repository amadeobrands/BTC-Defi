{
  "contractName": "TBTCDepositToken",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.10+commit.5a6ea5b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Currently, TDTs are minted using the uint256 casting of the      corresponding deposit contract's address. That is, the TDTs id is      convertible to the deposit's address and vice versa.\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"address to query the balance of\"},\"return\":\"uint256 representing the amount owned by the passed address\"},\"exists(uint256)\":{\"details\":\"Returns whether the specified token exists.\",\"params\":{\"_tokenId\":\"uint256 ID of the token to query the existence of\"},\"return\":\"bool whether the token exists\"},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"return\":\"address currently approved for the given token ID\"},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner.\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"return\":\"bool whether the given operator is approved by the given owner\"},\"mint(address,uint256)\":{\"details\":\"Mints a new token. Reverts if the given token ID already exists.\",\"params\":{\"_to\":\"The address that will own the minted token\",\"_tokenId\":\"uint256 ID of the token to be minted\"}},\"name()\":{\"details\":\"Gets the token name.\",\"return\":\"string representing the token name\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"return\":\"address currently marked as the owner of the given token ID\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"to\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"See `IERC165.supportsInterface`.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Gets the token symbol.\",\"return\":\"string representing the token symbol\"},\"tokenURI(uint256)\":{\"details\":\"Returns an URI for a given token ID. Throws if the token ID does not exist. May return an empty string.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use `safeTransferFrom` whenever possible. Requires the msg.sender to be the owner, approved, or operator.\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/tmp/4dc3a1f35eb2ac0746a4afda14417a7b0cb64f6d/implementation/contracts/system/TBTCDepositToken.sol\":\"TBTCDepositToken\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/tmp/4dc3a1f35eb2ac0746a4afda14417a7b0cb64f6d/implementation/contracts/system/TBTCDepositToken.sol\":{\"keccak256\":\"0xd93dd2c4e8723cd3b0fb74e1b9247a0c3411428ba9231c6272a6c4796c0de5d0\",\"urls\":[\"bzzr://65cd9142c447f7aacabbd5fac4eed599f58486b9345373d29d72efc34263e6dc\",\"dweb:/ipfs/QmQAh47tL45SV6PzvTb3X8kV5K48mAfp4dXgBRb2g3c9TK\"]},\"openzeppelin-solidity/contracts/drafts/Counters.sol\":{\"keccak256\":\"0x5eb69360d3441ab2ee799bd7c007cccbffb0896f12b2dfe1456193e2aa180a11\",\"urls\":[\"bzzr://ecd0352164978c418c8f5b0080c972b65e4b07f6afc593fb7cdd856185a458ea\",\"dweb:/ipfs/QmVTDHUriaxBJqiWCWgWC8vYaYYfXSz883LsowzTx1DcpK\"]},\"openzeppelin-solidity/contracts/introspection/ERC165.sol\":{\"keccak256\":\"0xac2eacd7e7762e275442f28f21d821544df5aae2ed7698af13be8c41b7005e2e\",\"urls\":[\"bzzr://43e901f6f210568ebc1d3591da3ce6a9d10796b854767a9c6e3da10305a8a332\",\"dweb:/ipfs/QmQhfx2Ufr8a2gFXm3KogL66xGgAuAWMwcamkWFKGG6Vya\"]},\"openzeppelin-solidity/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0x661553e43d7c4fbb2de504e5999fd5c104d367488350ed5bf023031bd1ba5ac5\",\"urls\":[\"bzzr://fc2ba15143ce3a00268ecd15fc98eb2469b18bfe27a64bbab0ac6446f161c739\",\"dweb:/ipfs/QmV7wjtRf11ibUHh4g8JjuhMpy68pPhV95L2y46UBoRfsZ\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x4ccf2d7b51873db1ccfd54ca2adae5eac3b184f9699911ed4490438419f1c690\",\"urls\":[\"bzzr://1604f5b6d6e916c154efd8c6720cda069e5ba32dfa0a9dedf2b42e5b02d07f89\",\"dweb:/ipfs/QmV3yVktya1s617QmuzQR2CfuJgUi3dR2xEZY9ecmqZ2G1\"]},\"openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0xf151df411bbf4eaef1fc8e8480cd10c2cd985f1a36517e63981517610213efc1\",\"urls\":[\"bzzr://9bca20c0c1208be8f31fc7a73faccd2fca4c5f84dc0a432ae2e066970551db34\",\"dweb:/ipfs/QmNRxggY8qmjjuLnxggRqE8uBueuCktLwi9YYHagWoaEJ8\"]},\"openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol\":{\"keccak256\":\"0xe5e28b1a405164faa98f8ecd8ed2b00907b89e3d58b2b2bb8ac8b12bc5714489\",\"urls\":[\"bzzr://5a804c3710e9eca0a111db4536b0c5d23bf4a66734a9856f3df2992900ed8f28\",\"dweb:/ipfs/QmP7r4jQMRxXb5JHy5V9bgMz5FmTezcSDd7ivyzJN88pTR\"]},\"openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xce48937a8007c580b8e2e35705738c922dd17540de89ebee6df06d2917a3f9fc\",\"urls\":[\"bzzr://de494d3843e2c151aa108782382720b5d9f4531f0aa620a4244ca12fc1f8a780\",\"dweb:/ipfs/QmTm5Z1c7zzPiG3Cfj1eBMB23AeiEFGgvmTFQVaeEWXVCw\"]},\"openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0x2b2b99dc7fe8fcd1f9427d00822b99cbc683dc21f5dd7532bd7e2281fd2c2ca2\",\"urls\":[\"bzzr://b89c69b072072e7fa1c8da973f82c7b28a64fb6bdc1e47626fedc89050ae783c\",\"dweb:/ipfs/QmZns9jTr7843njq3J2iL2LLoWXK5mdzN1bDGd9GL3ahhD\"]},\"openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xadbfb7028fb0f851dc848a48b9e54e7c89ffd2c2edc12fa4ba9bb383dfaa83d9\",\"urls\":[\"bzzr://2466b6491600969dd9ffdeb0b705e7cecc38418aa215cec64b2481273bba9076\",\"dweb:/ipfs/QmQ42UW5nchMoYP9bU9F1AJga5chG8j92fCPkURpiDKsCu\"]},\"openzeppelin-solidity/contracts/utils/Address.sol\":{\"keccak256\":\"0xf3358e5819ca73357abd6c90bdfffd0474af54364897f6b3e3234c4b71fbe9a1\",\"urls\":[\"bzzr://f7f6da60a184233fd666ac44e6fb2bd51ca6ebdc4867a310d368049aa4e62786\",\"dweb:/ipfs/Qmb3kNCoBUZdah1AgBBD4zMk898j5Qw8ahT1w5cCMYp5Y3\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604080518082018252601281527f744254432044656f7073697420546f6b656e00000000000000000000000000006020808301919091528251808401909352600383527f54445400000000000000000000000000000000000000000000000000000000009083015290620000af7f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b036200014b16565b620000e37f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b036200014b16565b8151620000f89060059060208501906200021a565b5080516200010e9060069060208401906200021a565b50620001437f5b5e139f000000000000000000000000000000000000000000000000000000006001600160e01b036200014b16565b5050620002bf565b7fffffffff000000000000000000000000000000000000000000000000000000008082161415620001dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025d57805160ff19168380011785556200028d565b828001600101855582156200028d579182015b828111156200028d57825182559160200191906001019062000270565b506200029b9291506200029f565b5090565b620002bc91905b808211156200029b5760008155600101620002a6565b90565b6111ba80620002cf6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80634f558e7911610097578063a22cb46511610066578063a22cb4651461032b578063b88d4fde14610359578063c87b56dd1461041f578063e985e9c51461043c576100f5565b80634f558e79146102b15780636352211e146102ce57806370a08231146102eb57806395d89b4114610323576100f5565b8063095ea7b3116100d3578063095ea7b3146101eb57806323b872dd1461021957806340c10f191461024f57806342842e0e1461027b576100f5565b806301ffc9a7146100fa57806306fdde0314610135578063081812fc146101b2575b600080fd5b6101216004803603602081101561011057600080fd5b50356001600160e01b03191661046a565b604080519115158252519081900360200190f35b61013d610489565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017757818101518382015260200161015f565b50505050905090810190601f1680156101a45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101cf600480360360208110156101c857600080fd5b503561051f565b604080516001600160a01b039092168252519081900360200190f35b6102176004803603604081101561020157600080fd5b506001600160a01b038135169060200135610581565b005b6102176004803603606081101561022f57600080fd5b506001600160a01b03813581169160208101359091169060400135610692565b6102176004803603604081101561026557600080fd5b506001600160a01b0381351690602001356106e7565b6102176004803603606081101561029157600080fd5b506001600160a01b038135811691602081013590911690604001356106f5565b610121600480360360208110156102c757600080fd5b5035610710565b6101cf600480360360208110156102e457600080fd5b5035610721565b6103116004803603602081101561030157600080fd5b50356001600160a01b0316610775565b60408051918252519081900360200190f35b61013d6107dd565b6102176004803603604081101561034157600080fd5b506001600160a01b038135169060200135151561083e565b6102176004803603608081101561036f57600080fd5b6001600160a01b038235811692602081013590911691604082013591908101906080810160608201356401000000008111156103aa57600080fd5b8201836020820111156103bc57600080fd5b803590602001918460018302840111640100000000831117156103de57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061090a945050505050565b61013d6004803603602081101561043557600080fd5b5035610962565b6101216004803603604081101561045257600080fd5b506001600160a01b0381358116916020013516610a47565b6001600160e01b03191660009081526020819052604090205460ff1690565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105155780601f106104ea57610100808354040283529160200191610515565b820191906000526020600020905b8154815290600101906020018083116104f857829003601f168201915b5050505050905090565b600061052a82610a75565b6105655760405162461bcd60e51b815260040180806020018281038252602c8152602001806110b0602c913960400191505060405180910390fd5b506000908152600260205260409020546001600160a01b031690565b600061058c82610721565b9050806001600160a01b0316836001600160a01b031614156105df5760405162461bcd60e51b81526004018080602001828103825260218152602001806111346021913960400191505060405180910390fd5b336001600160a01b03821614806105fb57506105fb8133610a47565b6106365760405162461bcd60e51b81526004018080602001828103825260388152602001806110256038913960400191505060405180910390fd5b60008281526002602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61069c3382610a92565b6106d75760405162461bcd60e51b81526004018080602001828103825260318152602001806111556031913960400191505060405180910390fd5b6106e2838383610b36565b505050565b6106f18282610c7a565b5050565b6106e28383836040518060200160405280600081525061090a565b600061071b82610a75565b92915050565b6000818152600160205260408120546001600160a01b03168061071b5760405162461bcd60e51b81526004018080602001828103825260298152602001806110876029913960400191505060405180910390fd5b60006001600160a01b0382166107bc5760405162461bcd60e51b815260040180806020018281038252602a81526020018061105d602a913960400191505060405180910390fd5b6001600160a01b038216600090815260036020526040902061071b90610dab565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105155780601f106104ea57610100808354040283529160200191610515565b6001600160a01b03821633141561089c576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b3360008181526004602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b610915848484610692565b61092184848484610daf565b61095c5760405162461bcd60e51b8152600401808060200182810382526032815260200180610fa36032913960400191505060405180910390fd5b50505050565b606061096d82610a75565b6109a85760405162461bcd60e51b815260040180806020018281038252602f815260200180611105602f913960400191505060405180910390fd5b60008281526007602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610a3b5780601f10610a1057610100808354040283529160200191610a3b565b820191906000526020600020905b815481529060010190602001808311610a1e57829003601f168201915b50505050509050919050565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b6000908152600160205260409020546001600160a01b0316151590565b6000610a9d82610a75565b610ad85760405162461bcd60e51b815260040180806020018281038252602c815260200180610ff9602c913960400191505060405180910390fd5b6000610ae383610721565b9050806001600160a01b0316846001600160a01b03161480610b1e5750836001600160a01b0316610b138461051f565b6001600160a01b0316145b80610b2e5750610b2e8185610a47565b949350505050565b826001600160a01b0316610b4982610721565b6001600160a01b031614610b8e5760405162461bcd60e51b81526004018080602001828103825260298152602001806110dc6029913960400191505060405180910390fd5b6001600160a01b038216610bd35760405162461bcd60e51b8152600401808060200182810382526024815260200180610fd56024913960400191505060405180910390fd5b610bdc81610ee2565b6001600160a01b0383166000908152600360205260409020610bfd90610f1f565b6001600160a01b0382166000908152600360205260409020610c1e90610f36565b60008181526001602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610cd5576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b610cde81610a75565b15610d30576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b600081815260016020908152604080832080546001600160a01b0319166001600160a01b038716908117909155835260039091529020610d6f90610f36565b60405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b5490565b6000610dc3846001600160a01b0316610f3f565b610dcf57506001610b2e565b604051630a85bd0160e11b815233600482018181526001600160a01b03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015610e49578181015183820152602001610e31565b50505050905090810190601f168015610e765780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610e9857600080fd5b505af1158015610eac573d6000803e3d6000fd5b505050506040513d6020811015610ec257600080fd5b50516001600160e01b031916630a85bd0160e11b14915050949350505050565b6000818152600260205260409020546001600160a01b031615610f1c57600081815260026020526040902080546001600160a01b03191690555b50565b8054610f3290600163ffffffff610f4516565b9055565b80546001019055565b3b151590565b600082821115610f9c576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a265627a7a72305820935dad60cd352351366f3cb395ee528267929047a392589879d81dd7ce68d11d64736f6c634300050a0032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80634f558e7911610097578063a22cb46511610066578063a22cb4651461032b578063b88d4fde14610359578063c87b56dd1461041f578063e985e9c51461043c576100f5565b80634f558e79146102b15780636352211e146102ce57806370a08231146102eb57806395d89b4114610323576100f5565b8063095ea7b3116100d3578063095ea7b3146101eb57806323b872dd1461021957806340c10f191461024f57806342842e0e1461027b576100f5565b806301ffc9a7146100fa57806306fdde0314610135578063081812fc146101b2575b600080fd5b6101216004803603602081101561011057600080fd5b50356001600160e01b03191661046a565b604080519115158252519081900360200190f35b61013d610489565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017757818101518382015260200161015f565b50505050905090810190601f1680156101a45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101cf600480360360208110156101c857600080fd5b503561051f565b604080516001600160a01b039092168252519081900360200190f35b6102176004803603604081101561020157600080fd5b506001600160a01b038135169060200135610581565b005b6102176004803603606081101561022f57600080fd5b506001600160a01b03813581169160208101359091169060400135610692565b6102176004803603604081101561026557600080fd5b506001600160a01b0381351690602001356106e7565b6102176004803603606081101561029157600080fd5b506001600160a01b038135811691602081013590911690604001356106f5565b610121600480360360208110156102c757600080fd5b5035610710565b6101cf600480360360208110156102e457600080fd5b5035610721565b6103116004803603602081101561030157600080fd5b50356001600160a01b0316610775565b60408051918252519081900360200190f35b61013d6107dd565b6102176004803603604081101561034157600080fd5b506001600160a01b038135169060200135151561083e565b6102176004803603608081101561036f57600080fd5b6001600160a01b038235811692602081013590911691604082013591908101906080810160608201356401000000008111156103aa57600080fd5b8201836020820111156103bc57600080fd5b803590602001918460018302840111640100000000831117156103de57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061090a945050505050565b61013d6004803603602081101561043557600080fd5b5035610962565b6101216004803603604081101561045257600080fd5b506001600160a01b0381358116916020013516610a47565b6001600160e01b03191660009081526020819052604090205460ff1690565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105155780601f106104ea57610100808354040283529160200191610515565b820191906000526020600020905b8154815290600101906020018083116104f857829003601f168201915b5050505050905090565b600061052a82610a75565b6105655760405162461bcd60e51b815260040180806020018281038252602c8152602001806110b0602c913960400191505060405180910390fd5b506000908152600260205260409020546001600160a01b031690565b600061058c82610721565b9050806001600160a01b0316836001600160a01b031614156105df5760405162461bcd60e51b81526004018080602001828103825260218152602001806111346021913960400191505060405180910390fd5b336001600160a01b03821614806105fb57506105fb8133610a47565b6106365760405162461bcd60e51b81526004018080602001828103825260388152602001806110256038913960400191505060405180910390fd5b60008281526002602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61069c3382610a92565b6106d75760405162461bcd60e51b81526004018080602001828103825260318152602001806111556031913960400191505060405180910390fd5b6106e2838383610b36565b505050565b6106f18282610c7a565b5050565b6106e28383836040518060200160405280600081525061090a565b600061071b82610a75565b92915050565b6000818152600160205260408120546001600160a01b03168061071b5760405162461bcd60e51b81526004018080602001828103825260298152602001806110876029913960400191505060405180910390fd5b60006001600160a01b0382166107bc5760405162461bcd60e51b815260040180806020018281038252602a81526020018061105d602a913960400191505060405180910390fd5b6001600160a01b038216600090815260036020526040902061071b90610dab565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105155780601f106104ea57610100808354040283529160200191610515565b6001600160a01b03821633141561089c576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b3360008181526004602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b610915848484610692565b61092184848484610daf565b61095c5760405162461bcd60e51b8152600401808060200182810382526032815260200180610fa36032913960400191505060405180910390fd5b50505050565b606061096d82610a75565b6109a85760405162461bcd60e51b815260040180806020018281038252602f815260200180611105602f913960400191505060405180910390fd5b60008281526007602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610a3b5780601f10610a1057610100808354040283529160200191610a3b565b820191906000526020600020905b815481529060010190602001808311610a1e57829003601f168201915b50505050509050919050565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b6000908152600160205260409020546001600160a01b0316151590565b6000610a9d82610a75565b610ad85760405162461bcd60e51b815260040180806020018281038252602c815260200180610ff9602c913960400191505060405180910390fd5b6000610ae383610721565b9050806001600160a01b0316846001600160a01b03161480610b1e5750836001600160a01b0316610b138461051f565b6001600160a01b0316145b80610b2e5750610b2e8185610a47565b949350505050565b826001600160a01b0316610b4982610721565b6001600160a01b031614610b8e5760405162461bcd60e51b81526004018080602001828103825260298152602001806110dc6029913960400191505060405180910390fd5b6001600160a01b038216610bd35760405162461bcd60e51b8152600401808060200182810382526024815260200180610fd56024913960400191505060405180910390fd5b610bdc81610ee2565b6001600160a01b0383166000908152600360205260409020610bfd90610f1f565b6001600160a01b0382166000908152600360205260409020610c1e90610f36565b60008181526001602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610cd5576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b610cde81610a75565b15610d30576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b600081815260016020908152604080832080546001600160a01b0319166001600160a01b038716908117909155835260039091529020610d6f90610f36565b60405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b5490565b6000610dc3846001600160a01b0316610f3f565b610dcf57506001610b2e565b604051630a85bd0160e11b815233600482018181526001600160a01b03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015610e49578181015183820152602001610e31565b50505050905090810190601f168015610e765780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610e9857600080fd5b505af1158015610eac573d6000803e3d6000fd5b505050506040513d6020811015610ec257600080fd5b50516001600160e01b031916630a85bd0160e11b14915050949350505050565b6000818152600260205260409020546001600160a01b031615610f1c57600081815260026020526040902080546001600160a01b03191690555b50565b8054610f3290600163ffffffff610f4516565b9055565b80546001019055565b3b151590565b600082821115610f9c576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a265627a7a72305820935dad60cd352351366f3cb395ee528267929047a392589879d81dd7ce68d11d64736f6c634300050a0032",
  "sourceMap": "924:770:20:-;;;975:128;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;753:254:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;718:40:34;737:20;-1:-1:-1;;;;;718:18:34;:40;:::i;:::-;2220::41;2239:20;-1:-1:-1;;;;;2220:18:41;:40;:::i;:::-;825:12:42;;;;:5;;:12;;;;;:::i;:::-;-1:-1:-1;847:16:42;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;951:49:42;970:29;-1:-1:-1;;;;;951:18:42;:49;:::i;:::-;753:254;;924:770:20;;1442:190:34;1517:25;;;;;;1509:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1585:33;;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1585:40:34;1621:4;1585:40;;;1442:190::o;924:770:20:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;924:770:20;;;-1:-1:-1;924:770:20;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "924:770:20:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;924:770:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;915:133:34;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;915:133:34;-1:-1:-1;;;;;;915:133:34;;:::i;:::-;;;;;;;;;;;;;;;;;;1112:83:42;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1112:83:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4237:200:41;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4237:200:41;;:::i;:::-;;;;-1:-1:-1;;;;;4237:200:41;;;;;;;;;;;;;;3541:411;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3541:411:41;;;;;;;;:::i;:::-;;5877:285;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5877:285:41;;;;;;;;;;;;;;;;;:::i;1318:89:20:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1318:89:20;;;;;;;;:::i;6795:132:41:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;6795:132:41;;;;;;;;;;;;;;;;;:::i;1590:102:20:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1590:102:20;;:::i;2897:223:41:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2897:223:41;;:::i;2471:207::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2471:207:41;-1:-1:-1;;;;;2471:207:41;;:::i;:::-;;;;;;;;;;;;;;;;1304:87:42;;;:::i;4730:243:41:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4730:243:41;;;;;;;;;;:::i;7632:265::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;7632:265:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;7632:265:41;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7632:265:41;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7632:265:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;7632:265:41;;-1:-1:-1;7632:265:41;;-1:-1:-1;;;;;7632:265:41:i;1591:202:42:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1591:202:42;;:::i;5295:145:41:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5295:145:41;;;;;;;;;;:::i;915:133:34:-;-1:-1:-1;;;;;;1008:33:34;985:4;1008:33;;;;;;;;;;;;;;915:133::o;1112:83:42:-;1183:5;1176:12;;;;;;;;-1:-1:-1;;1176:12:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1151:13;;1176:12;;1183:5;;1176:12;;1183:5;1176:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1112:83;:::o;4237:200:41:-;4296:7;4323:16;4331:7;4323;:16::i;:::-;4315:73;;;;-1:-1:-1;;;4315:73:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4406:24:41;;;;:15;:24;;;;;;-1:-1:-1;;;;;4406:24:41;;4237:200::o;3541:411::-;3604:13;3620:16;3628:7;3620;:16::i;:::-;3604:32;;3660:5;-1:-1:-1;;;;;3654:11:41;:2;-1:-1:-1;;;;;3654:11:41;;;3646:57;;;;-1:-1:-1;;;3646:57:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3722:10;-1:-1:-1;;;;;3722:19:41;;;;:58;;;3745:35;3762:5;3769:10;3745:16;:35::i;:::-;3714:148;;;;-1:-1:-1;;;3714:148:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3873:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;;;;;3873:29:41;-1:-1:-1;;;;;3873:29:41;;;;;;;;;3917:28;;3873:24;;3917:28;;;;;;;3541:411;;;:::o;5877:285::-;6019:39;6038:10;6050:7;6019:18;:39::i;:::-;6011:101;;;;-1:-1:-1;;;6011:101:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6123:32;6137:4;6143:2;6147:7;6123:13;:32::i;:::-;5877:285;;;:::o;1318:89:20:-;1380:20;1386:3;1391:8;1380:5;:20::i;:::-;1318:89;;:::o;6795:132:41:-;6881:39;6898:4;6904:2;6908:7;6881:39;;;;;;;;;;;;:16;:39::i;1590:102:20:-;1645:4;1668:17;1676:8;1668:7;:17::i;:::-;1661:24;1590:102;-1:-1:-1;;1590:102:20:o;2897:223:41:-;2952:7;2987:20;;;:11;:20;;;;;;-1:-1:-1;;;;;2987:20:41;3025:19;3017:73;;;;-1:-1:-1;;;3017:73:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:207;2526:7;-1:-1:-1;;;;;2553:19:41;;2545:74;;;;-1:-1:-1;;;2545:74:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2637:24:41;;;;;;:17;:24;;;;;:34;;:32;:34::i;1304:87:42:-;1377:7;1370:14;;;;;;;;-1:-1:-1;;1370:14:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1345:13;;1370:14;;1377:7;;1370:14;;1377:7;1370:14;;;;;;;;;;;;;;;;;;;;;;;;4730:243:41;-1:-1:-1;;;;;4809:16:41;;4815:10;4809:16;;4801:54;;;;;-1:-1:-1;;;4801:54:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;4885:10;4866:30;;;;:18;:30;;;;;;;;-1:-1:-1;;;;;4866:34:41;;;;;;;;;;;;:45;;-1:-1:-1;;4866:45:41;;;;;;;;;;4926:40;;;;;;;4866:34;;4885:10;4926:40;;;;;;;;;;;4730:243;;:::o;7632:265::-;7738:31;7751:4;7757:2;7761:7;7738:12;:31::i;:::-;7787:48;7810:4;7816:2;7820:7;7829:5;7787:22;:48::i;:::-;7779:111;;;;-1:-1:-1;;;7779:111:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7632:265;;;;:::o;1591:202:42:-;1649:13;1682:16;1690:7;1682;:16::i;:::-;1674:76;;;;-1:-1:-1;;;1674:76:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1767:19;;;;:10;:19;;;;;;;;;1760:26;;;;;;-1:-1:-1;;1760:26:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1767:19;;1760:26;;1767:19;1760:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1591:202;;;:::o;5295:145:41:-;-1:-1:-1;;;;;5398:25:41;;;5375:4;5398:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;5295:145::o;8092:152::-;8149:4;8181:20;;;:11;:20;;;;;;-1:-1:-1;;;;;8181:20:41;8218:19;;;8092:152::o;8605:329::-;8690:4;8714:16;8722:7;8714;:16::i;:::-;8706:73;;;;-1:-1:-1;;;8706:73:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8789:13;8805:16;8813:7;8805;:16::i;:::-;8789:32;;8850:5;-1:-1:-1;;;;;8839:16:41;:7;-1:-1:-1;;;;;8839:16:41;;:51;;;;8883:7;-1:-1:-1;;;;;8859:31:41;:20;8871:7;8859:11;:20::i;:::-;-1:-1:-1;;;;;8859:31:41;;8839:51;:87;;;;8894:32;8911:5;8918:7;8894:16;:32::i;:::-;8831:96;8605:329;-1:-1:-1;;;;8605:329:41:o;10751:447::-;10864:4;-1:-1:-1;;;;;10844:24:41;:16;10852:7;10844;:16::i;:::-;-1:-1:-1;;;;;10844:24:41;;10836:78;;;;-1:-1:-1;;;10836:78:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;10932:16:41;;10924:65;;;;-1:-1:-1;;;10924:65:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11000:23;11015:7;11000:14;:23::i;:::-;-1:-1:-1;;;;;11034:23:41;;;;;;:17;:23;;;;;:35;;:33;:35::i;:::-;-1:-1:-1;;;;;11079:21:41;;;;;;:17;:21;;;;;:33;;:31;:33::i;:::-;11123:20;;;;:11;:20;;;;;;:25;;-1:-1:-1;;;;;;11123:25:41;-1:-1:-1;;;;;11123:25:41;;;;;;;;;11164:27;;11123:20;;11164:27;;;;;;;10751:447;;;:::o;9179:327::-;-1:-1:-1;;;;;9250:16:41;;9242:61;;;;;-1:-1:-1;;;9242:61:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9322:16;9330:7;9322;:16::i;:::-;9321:17;9313:58;;;;;-1:-1:-1;;;9313:58:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;9382:20;;;;:11;:20;;;;;;;;:25;;-1:-1:-1;;;;;;9382:25:41;-1:-1:-1;;;;;9382:25:41;;;;;;;;9417:21;;:17;:21;;;;;:33;;:31;:33::i;:::-;9466;;9491:7;;-1:-1:-1;;;;;9466:33:41;;;9483:1;;9466:33;;9483:1;;9466:33;9179:327;;:::o;1063:112:33:-;1154:14;;1063:112::o;11771:347:41:-;11892:4;11917:15;:2;-1:-1:-1;;;;;11917:13:41;;:15::i;:::-;11912:58;;-1:-1:-1;11955:4:41;11948:11;;11912:58;11996:70;;-1:-1:-1;;;11996:70:41;;12033:10;11996:70;;;;;;-1:-1:-1;;;;;11996:70:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;11980:13;;11996:36;;;;;;12033:10;;12045:4;;12051:7;;12060:5;;11996:70;;;;;;;;;;;11980:13;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;11996:70:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11996:70:41;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11996:70:41;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;11996:70:41;-1:-1:-1;;;;;;12084:26:41;-1:-1:-1;;;12084:26:41;;-1:-1:-1;;11771:347:41;;;;;;:::o;12280:171::-;12379:1;12343:24;;;:15;:24;;;;;;-1:-1:-1;;;;;12343:24:41;:38;12339:106;;12432:1;12397:24;;;:15;:24;;;;;:37;;-1:-1:-1;;;;;;12397:37:41;;;12339:106;12280:171;:::o;1276:108:33:-;1356:14;;:21;;1375:1;1356:21;:18;:21;:::i;:::-;1339:38;;1276:108::o;1181:89::-;1244:19;;1262:1;1244:19;;;1181:89::o;542:413:46:-;902:20;940:8;;;542:413::o;1274:179:36:-;1332:7;1364:1;1359;:6;;1351:49;;;;;-1:-1:-1;;;1351:49:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1422:5:36;;;1274:179::o",
  "source": "pragma solidity ^0.5.10;\n\nimport \"openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol\";\n\n/// @title tBTC Deposit Token for tracking deposit ownership\n/// @notice The tBTC Deposit Token, commonly referenced as the TDT, is an\n///         ERC721 non-fungible token whose ownership reflects the ownership\n///         of its corresponding deposit. Each deposit has one TDT, and vice\n///         versa. Owning a TDT is equivalent to owning its corresponding\n///         deposit. TDTs can be transferred freely. tBTC's VendingMachine\n///         contract takes ownership of TDTs and in exchange returns fungible\n//          TBTC tokens whose value is backed 1-to-1 by the corresponding\n//          deposit's BTC.\n/// @dev Currently, TDTs are minted using the uint256 casting of the\n///      corresponding deposit contract's address. That is, the TDTs id is\n///      convertible to the deposit's address and vice versa.\ncontract TBTCDepositToken is ERC721Metadata {\n\n    constructor() ERC721Metadata(\"tBTC Deopsit Token\", \"TDT\") public {\n        // solium-disable-previous-line no-empty-blocks\n    }\n\n    /// @dev Mints a new token.\n    /// Reverts if the given token ID already exists.\n    /// @param _to The address that will own the minted token\n    /// @param _tokenId uint256 ID of the token to be minted\n    function mint(address _to, uint256 _tokenId) public {\n        _mint(_to, _tokenId);\n    }\n\n    /// @dev Returns whether the specified token exists.\n    /// @param _tokenId uint256 ID of the token to query the existence of\n    /// @return bool whether the token exists\n    function exists(uint256 _tokenId) public view returns (bool) {\n        return _exists(_tokenId);\n    }\n}\n",
  "sourcePath": "/tmp/4dc3a1f35eb2ac0746a4afda14417a7b0cb64f6d/implementation/contracts/system/TBTCDepositToken.sol",
  "ast": {
    "absolutePath": "/tmp/4dc3a1f35eb2ac0746a4afda14417a7b0cb64f6d/implementation/contracts/system/TBTCDepositToken.sol",
    "exportedSymbols": {
      "TBTCDepositToken": [
        6359
      ]
    },
    "id": 6360,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6322,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".10"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:20"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol",
        "id": 6323,
        "nodeType": "ImportDirective",
        "scope": 6360,
        "sourceUnit": 11727,
        "src": "26:73:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6324,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 11726,
              "src": "953:14:20",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$11726",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 6325,
            "nodeType": "InheritanceSpecifier",
            "src": "953:14:20"
          }
        ],
        "contractDependencies": [
          10254,
          10264,
          11597,
          11726,
          11829,
          11852
        ],
        "contractKind": "contract",
        "documentation": "@dev Currently, TDTs are minted using the uint256 casting of the\n      corresponding deposit contract's address. That is, the TDTs id is\n      convertible to the deposit's address and vice versa.",
        "fullyImplemented": true,
        "id": 6359,
        "linearizedBaseContracts": [
          6359,
          11726,
          11852,
          11597,
          11829,
          10254,
          10264
        ],
        "name": "TBTCDepositToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 6332,
              "nodeType": "Block",
              "src": "1040:63:20",
              "statements": []
            },
            "documentation": null,
            "id": 6333,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "744254432044656f7073697420546f6b656e",
                    "id": 6328,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1004:20:20",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_3ed832e8b8fbd80a7da3cb2721a2afaaa65cb440b5a5c00f8ec07b94e9963183",
                      "typeString": "literal_string \"tBTC Deopsit Token\""
                    },
                    "value": "tBTC Deopsit Token"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "544454",
                    "id": 6329,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1026:5:20",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_1704b82c57cad252ae2ae014b178afce8e403189d3d12e098e6e949b0ca3b2bc",
                      "typeString": "literal_string \"TDT\""
                    },
                    "value": "TDT"
                  }
                ],
                "id": 6330,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 6327,
                  "name": "ERC721Metadata",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 11726,
                  "src": "989:14:20",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721Metadata_$11726_$",
                    "typeString": "type(contract ERC721Metadata)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "989:43:20"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6326,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "986:2:20"
            },
            "returnParameters": {
              "id": 6331,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1040:0:20"
            },
            "scope": 6359,
            "src": "975:128:20",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 6345,
              "nodeType": "Block",
              "src": "1370:37:20",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6341,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6335,
                        "src": "1386:3:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 6342,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6337,
                        "src": "1391:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 6340,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11421,
                      "src": "1380:5:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 6343,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1380:20:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6344,
                  "nodeType": "ExpressionStatement",
                  "src": "1380:20:20"
                }
              ]
            },
            "documentation": "@dev Mints a new token.\n Reverts if the given token ID already exists.\n @param _to The address that will own the minted token\n @param _tokenId uint256 ID of the token to be minted",
            "id": 6346,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6338,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6335,
                  "name": "_to",
                  "nodeType": "VariableDeclaration",
                  "scope": 6346,
                  "src": "1332:11:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6334,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1332:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6337,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 6346,
                  "src": "1345:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6336,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1345:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1331:31:20"
            },
            "returnParameters": {
              "id": 6339,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1370:0:20"
            },
            "scope": 6359,
            "src": "1318:89:20",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 6357,
              "nodeType": "Block",
              "src": "1651:41:20",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6354,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6348,
                        "src": "1676:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 6353,
                      "name": "_exists",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11337,
                      "src": "1668:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (uint256) view returns (bool)"
                      }
                    },
                    "id": 6355,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1668:17:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 6352,
                  "id": 6356,
                  "nodeType": "Return",
                  "src": "1661:24:20"
                }
              ]
            },
            "documentation": "@dev Returns whether the specified token exists.\n @param _tokenId uint256 ID of the token to query the existence of\n @return bool whether the token exists",
            "id": 6358,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "exists",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6349,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6348,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 6358,
                  "src": "1606:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6347,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1606:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1605:18:20"
            },
            "returnParameters": {
              "id": 6352,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6351,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 6358,
                  "src": "1645:4:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 6350,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1645:4:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1644:6:20"
            },
            "scope": 6359,
            "src": "1590:102:20",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 6360,
        "src": "924:770:20"
      }
    ],
    "src": "0:1695:20"
  },
  "legacyAST": {
    "absolutePath": "/tmp/4dc3a1f35eb2ac0746a4afda14417a7b0cb64f6d/implementation/contracts/system/TBTCDepositToken.sol",
    "exportedSymbols": {
      "TBTCDepositToken": [
        6359
      ]
    },
    "id": 6360,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6322,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".10"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:20"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol",
        "id": 6323,
        "nodeType": "ImportDirective",
        "scope": 6360,
        "sourceUnit": 11727,
        "src": "26:73:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6324,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 11726,
              "src": "953:14:20",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$11726",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 6325,
            "nodeType": "InheritanceSpecifier",
            "src": "953:14:20"
          }
        ],
        "contractDependencies": [
          10254,
          10264,
          11597,
          11726,
          11829,
          11852
        ],
        "contractKind": "contract",
        "documentation": "@dev Currently, TDTs are minted using the uint256 casting of the\n      corresponding deposit contract's address. That is, the TDTs id is\n      convertible to the deposit's address and vice versa.",
        "fullyImplemented": true,
        "id": 6359,
        "linearizedBaseContracts": [
          6359,
          11726,
          11852,
          11597,
          11829,
          10254,
          10264
        ],
        "name": "TBTCDepositToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 6332,
              "nodeType": "Block",
              "src": "1040:63:20",
              "statements": []
            },
            "documentation": null,
            "id": 6333,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "744254432044656f7073697420546f6b656e",
                    "id": 6328,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1004:20:20",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_3ed832e8b8fbd80a7da3cb2721a2afaaa65cb440b5a5c00f8ec07b94e9963183",
                      "typeString": "literal_string \"tBTC Deopsit Token\""
                    },
                    "value": "tBTC Deopsit Token"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "544454",
                    "id": 6329,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1026:5:20",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_1704b82c57cad252ae2ae014b178afce8e403189d3d12e098e6e949b0ca3b2bc",
                      "typeString": "literal_string \"TDT\""
                    },
                    "value": "TDT"
                  }
                ],
                "id": 6330,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 6327,
                  "name": "ERC721Metadata",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 11726,
                  "src": "989:14:20",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721Metadata_$11726_$",
                    "typeString": "type(contract ERC721Metadata)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "989:43:20"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6326,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "986:2:20"
            },
            "returnParameters": {
              "id": 6331,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1040:0:20"
            },
            "scope": 6359,
            "src": "975:128:20",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 6345,
              "nodeType": "Block",
              "src": "1370:37:20",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6341,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6335,
                        "src": "1386:3:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 6342,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6337,
                        "src": "1391:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 6340,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11421,
                      "src": "1380:5:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 6343,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1380:20:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6344,
                  "nodeType": "ExpressionStatement",
                  "src": "1380:20:20"
                }
              ]
            },
            "documentation": "@dev Mints a new token.\n Reverts if the given token ID already exists.\n @param _to The address that will own the minted token\n @param _tokenId uint256 ID of the token to be minted",
            "id": 6346,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6338,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6335,
                  "name": "_to",
                  "nodeType": "VariableDeclaration",
                  "scope": 6346,
                  "src": "1332:11:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6334,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1332:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6337,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 6346,
                  "src": "1345:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6336,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1345:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1331:31:20"
            },
            "returnParameters": {
              "id": 6339,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1370:0:20"
            },
            "scope": 6359,
            "src": "1318:89:20",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 6357,
              "nodeType": "Block",
              "src": "1651:41:20",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6354,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6348,
                        "src": "1676:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 6353,
                      "name": "_exists",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11337,
                      "src": "1668:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (uint256) view returns (bool)"
                      }
                    },
                    "id": 6355,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1668:17:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 6352,
                  "id": 6356,
                  "nodeType": "Return",
                  "src": "1661:24:20"
                }
              ]
            },
            "documentation": "@dev Returns whether the specified token exists.\n @param _tokenId uint256 ID of the token to query the existence of\n @return bool whether the token exists",
            "id": 6358,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "exists",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6349,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6348,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 6358,
                  "src": "1606:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6347,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1606:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1605:18:20"
            },
            "returnParameters": {
              "id": 6352,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6351,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 6358,
                  "src": "1645:4:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 6350,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1645:4:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1644:6:20"
            },
            "scope": 6359,
            "src": "1590:102:20",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 6360,
        "src": "924:770:20"
      }
    ],
    "src": "0:1695:20"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.10+commit.5a6ea5b1.Emscripten.clang"
  },
  "networks": {
    "3": {
      "events": {
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "name": "to",
              "type": "address"
            },
            {
              "indexed": true,
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event",
          "signature": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
        },
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "name": "approved",
              "type": "address"
            },
            {
              "indexed": true,
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event",
          "signature": "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925"
        },
        "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event",
          "signature": "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31"
        }
      },
      "links": {},
      "address": "0x8ade4754FcdDF1BEF2eaFdEe7BCCf1CA1afbF99e",
      "transactionHash": "0xbf963ce0efa30dc86e1c58806b17d4a6a00243c9a1c5781c6aa9fb1609e5705b"
    }
  },
  "schemaVersion": "3.0.19",
  "updatedAt": "2020-02-06T21:45:08.173Z",
  "networkType": "ethereum",
  "devdoc": {
    "details": "Currently, TDTs are minted using the uint256 casting of the      corresponding deposit contract's address. That is, the TDTs id is      convertible to the deposit's address and vice versa.",
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "exists(uint256)": {
        "details": "Returns whether the specified token exists.",
        "params": {
          "_tokenId": "uint256 ID of the token to query the existence of"
        },
        "return": "bool whether the token exists"
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner.",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "mint(address,uint256)": {
        "details": "Mints a new token. Reverts if the given token ID already exists.",
        "params": {
          "_to": "The address that will own the minted token",
          "_tokenId": "uint256 ID of the token to be minted"
        }
      },
      "name()": {
        "details": "Gets the token name.",
        "return": "string representing the token name"
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID.",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "address currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See `IERC165.supportsInterface`.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Gets the token symbol.",
        "return": "string representing the token symbol"
      },
      "tokenURI(uint256)": {
        "details": "Returns an URI for a given token ID. Throws if the token ID does not exist. May return an empty string.",
        "params": {
          "tokenId": "uint256 ID of the token to query"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use `safeTransferFrom` whenever possible. Requires the msg.sender to be the owner, approved, or operator.",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}