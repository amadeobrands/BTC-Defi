{
  "contractName": "IECDSAKeep",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "getPublicKey",
      "outputs": [
        {
          "name": "",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_digest",
          "type": "bytes32"
        }
      ],
      "name": "sign",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "distributeETHToMembers",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "distributeERC20ToMembers",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.10+commit.5a6ea5b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"getPublicKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeETHToMembers\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_digest\",\"type\":\"bytes32\"}],\"name\":\"sign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"distributeERC20ToMembers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"TODO: This is a stub contract - needs to be implemented.\",\"methods\":{\"distributeERC20ToMembers(address,uint256)\":{\"details\":\"This works with any ERC20 token that implements a transferFrom function. This function only has authority over pre-approved token amount. We don't explicitly check for allowance, SafeMath subtraction overflow is enough protection.\",\"params\":{\"_tokenAddress\":\"Address of the ERC20 token to distribute.\",\"_value\":\"Amount of ERC20 token to distribute.\"}},\"distributeETHToMembers()\":{\"details\":\"Only the value passed to this function will be distributed.\"},\"getPublicKey()\":{\"return\":\"Signer's public key.\"},\"sign(bytes32)\":{\"params\":{\"_digest\":\"Digest to be signed.\"}}},\"title\":\"ECDSA Keep\"},\"userdoc\":{\"methods\":{\"distributeERC20ToMembers(address,uint256)\":{\"notice\":\"Distributes ERC20 token evenly across all keep members.\"},\"distributeETHToMembers()\":{\"notice\":\"Distributes ETH evenly across all keep members.\"},\"getPublicKey()\":{\"notice\":\"Returns the keep signer's public key.\"},\"sign(bytes32)\":{\"notice\":\"Calculates a signature over provided digest by the keep.\"}},\"notice\":\"Contract reflecting an ECDSA keep.\"}},\"settings\":{\"compilationTarget\":{\"@keep-network/keep-ecdsa/contracts/api/IECDSAKeep.sol\":\"IECDSAKeep\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@keep-network/keep-ecdsa/contracts/api/IECDSAKeep.sol\":{\"keccak256\":\"0xcb38e1f2ff247d40f2a8ad2ecc0144891137d9388d8582ad2141dc292ab97211\",\"urls\":[\"bzzr://080cf4cc427fd29c7aca7da9c5e41dafa597b65d298b1bd5e6e5c3ceb9b78f4f\",\"dweb:/ipfs/Qmb2YsTxpr7wcAbUzsH8yEzpiKMkDEq5uW35zyDN7CRH8a\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "pragma solidity ^0.5.4;\n\n/// @title ECDSA Keep\n/// @notice Contract reflecting an ECDSA keep.\n/// @dev TODO: This is a stub contract - needs to be implemented.\ncontract IECDSAKeep {\n\n    /// @notice Returns the keep signer's public key.\n    /// @return Signer's public key.\n    function getPublicKey() external view returns (bytes memory);\n\n    /// @notice Calculates a signature over provided digest by the keep.\n    /// @param _digest Digest to be signed.\n    function sign(bytes32 _digest) external;\n\n    /// @notice Distributes ETH evenly across all keep members.\n    /// @dev Only the value passed to this function will be distributed.\n    function distributeETHToMembers() external payable;\n\n    /// @notice Distributes ERC20 token evenly across all keep members.\n    /// @dev This works with any ERC20 token that implements a transferFrom\n    /// function.\n    /// This function only has authority over pre-approved\n    /// token amount. We don't explicitly check for allowance, SafeMath\n    /// subtraction overflow is enough protection.\n    /// @param _tokenAddress Address of the ERC20 token to distribute.\n    /// @param _value Amount of ERC20 token to distribute.\n    function distributeERC20ToMembers(address _tokenAddress, uint256 _value) external;\n}\n",
  "sourcePath": "@keep-network/keep-ecdsa/contracts/api/IECDSAKeep.sol",
  "ast": {
    "absolutePath": "@keep-network/keep-ecdsa/contracts/api/IECDSAKeep.sol",
    "exportedSymbols": {
      "IECDSAKeep": [
        7335
      ]
    },
    "id": 7336,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7314,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:25"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title ECDSA Keep\n @notice Contract reflecting an ECDSA keep.\n @dev TODO: This is a stub contract - needs to be implemented.",
        "fullyImplemented": false,
        "id": 7335,
        "linearizedBaseContracts": [
          7335
        ],
        "name": "IECDSAKeep",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": "@notice Returns the keep signer's public key.\n @return Signer's public key.",
            "id": 7319,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getPublicKey",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7315,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "299:2:25"
            },
            "returnParameters": {
              "id": 7318,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7317,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 7319,
                  "src": "325:12:25",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 7316,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "325:5:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "324:14:25"
            },
            "scope": 7335,
            "src": "278:61:25",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": "@notice Calculates a signature over provided digest by the keep.\n @param _digest Digest to be signed.",
            "id": 7324,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "sign",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7322,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7321,
                  "name": "_digest",
                  "nodeType": "VariableDeclaration",
                  "scope": 7324,
                  "src": "476:15:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 7320,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "476:7:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "475:17:25"
            },
            "returnParameters": {
              "id": 7323,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "501:0:25"
            },
            "scope": 7335,
            "src": "462:40:25",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": "@notice Distributes ETH evenly across all keep members.\n @dev Only the value passed to this function will be distributed.",
            "id": 7327,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "distributeETHToMembers",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7325,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "676:2:25"
            },
            "returnParameters": {
              "id": 7326,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "695:0:25"
            },
            "scope": 7335,
            "src": "645:51:25",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": "@notice Distributes ERC20 token evenly across all keep members.\n @dev This works with any ERC20 token that implements a transferFrom\n function.\n This function only has authority over pre-approved\n token amount. We don't explicitly check for allowance, SafeMath\n subtraction overflow is enough protection.\n @param _tokenAddress Address of the ERC20 token to distribute.\n @param _value Amount of ERC20 token to distribute.",
            "id": 7334,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "distributeERC20ToMembers",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7332,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7329,
                  "name": "_tokenAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 7334,
                  "src": "1214:21:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7328,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1214:7:25",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7331,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 7334,
                  "src": "1237:14:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7330,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1237:7:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1213:39:25"
            },
            "returnParameters": {
              "id": 7333,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1261:0:25"
            },
            "scope": 7335,
            "src": "1180:82:25",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 7336,
        "src": "160:1104:25"
      }
    ],
    "src": "0:1265:25"
  },
  "legacyAST": {
    "absolutePath": "@keep-network/keep-ecdsa/contracts/api/IECDSAKeep.sol",
    "exportedSymbols": {
      "IECDSAKeep": [
        7335
      ]
    },
    "id": 7336,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7314,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:25"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title ECDSA Keep\n @notice Contract reflecting an ECDSA keep.\n @dev TODO: This is a stub contract - needs to be implemented.",
        "fullyImplemented": false,
        "id": 7335,
        "linearizedBaseContracts": [
          7335
        ],
        "name": "IECDSAKeep",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": "@notice Returns the keep signer's public key.\n @return Signer's public key.",
            "id": 7319,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getPublicKey",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7315,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "299:2:25"
            },
            "returnParameters": {
              "id": 7318,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7317,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 7319,
                  "src": "325:12:25",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 7316,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "325:5:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "324:14:25"
            },
            "scope": 7335,
            "src": "278:61:25",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": "@notice Calculates a signature over provided digest by the keep.\n @param _digest Digest to be signed.",
            "id": 7324,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "sign",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7322,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7321,
                  "name": "_digest",
                  "nodeType": "VariableDeclaration",
                  "scope": 7324,
                  "src": "476:15:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 7320,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "476:7:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "475:17:25"
            },
            "returnParameters": {
              "id": 7323,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "501:0:25"
            },
            "scope": 7335,
            "src": "462:40:25",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": "@notice Distributes ETH evenly across all keep members.\n @dev Only the value passed to this function will be distributed.",
            "id": 7327,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "distributeETHToMembers",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7325,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "676:2:25"
            },
            "returnParameters": {
              "id": 7326,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "695:0:25"
            },
            "scope": 7335,
            "src": "645:51:25",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": "@notice Distributes ERC20 token evenly across all keep members.\n @dev This works with any ERC20 token that implements a transferFrom\n function.\n This function only has authority over pre-approved\n token amount. We don't explicitly check for allowance, SafeMath\n subtraction overflow is enough protection.\n @param _tokenAddress Address of the ERC20 token to distribute.\n @param _value Amount of ERC20 token to distribute.",
            "id": 7334,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "distributeERC20ToMembers",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7332,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7329,
                  "name": "_tokenAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 7334,
                  "src": "1214:21:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7328,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1214:7:25",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7331,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 7334,
                  "src": "1237:14:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7330,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1237:7:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1213:39:25"
            },
            "returnParameters": {
              "id": 7333,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1261:0:25"
            },
            "scope": 7335,
            "src": "1180:82:25",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 7336,
        "src": "160:1104:25"
      }
    ],
    "src": "0:1265:25"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.10+commit.5a6ea5b1.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.19",
  "updatedAt": "2020-02-06T21:33:55.739Z",
  "devdoc": {
    "details": "TODO: This is a stub contract - needs to be implemented.",
    "methods": {
      "distributeERC20ToMembers(address,uint256)": {
        "details": "This works with any ERC20 token that implements a transferFrom function. This function only has authority over pre-approved token amount. We don't explicitly check for allowance, SafeMath subtraction overflow is enough protection.",
        "params": {
          "_tokenAddress": "Address of the ERC20 token to distribute.",
          "_value": "Amount of ERC20 token to distribute."
        }
      },
      "distributeETHToMembers()": {
        "details": "Only the value passed to this function will be distributed."
      },
      "getPublicKey()": {
        "return": "Signer's public key."
      },
      "sign(bytes32)": {
        "params": {
          "_digest": "Digest to be signed."
        }
      }
    },
    "title": "ECDSA Keep"
  },
  "userdoc": {
    "methods": {
      "distributeERC20ToMembers(address,uint256)": {
        "notice": "Distributes ERC20 token evenly across all keep members."
      },
      "distributeETHToMembers()": {
        "notice": "Distributes ETH evenly across all keep members."
      },
      "getPublicKey()": {
        "notice": "Returns the keep signer's public key."
      },
      "sign(bytes32)": {
        "notice": "Calculates a signature over provided digest by the keep."
      }
    },
    "notice": "Contract reflecting an ECDSA keep."
  }
}