{"version":3,"sources":["tbtc.js/EthereumHelpers.js","tbtc.js/Deposit.js","tbtc.js/lib/BitcoinSPV.js","tbtc.js/lib/BitcoinTxParser.js","tbtc.js/lib/ElectrumClient.js","images/dots.svg","images/one.svg","images/two.svg","images/done.svg","../node_modules/@truffle/contract/node_modules/web3-eth-accounts/src sync","../node_modules/@truffle/interface-adapter/node_modules/web3-eth-accounts/src sync","components/QRCode.js","utils.js","hooks/index.js","App.js","index.js","tbtc.js/TBTC.js","tbtc.js/Redemption.js","tbtc.js/BitcoinHelpers.js"],"names":["getExistingEvent","_callee2","source","eventName","filter","events","_Users_jonathanschwartz_Documents_owl_hack_BTC_Defi_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context2","prev","next","getPastEvents","fromBlock","toBlock","sent","abrupt","stop","__webpack_exports__","getEvent","sourceContract","Promise","resolve","once","event","clearInterval","handle","setInterval","Object","_Users_jonathanschwartz_Documents_owl_hack_BTC_Defi_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","mark","_callee","_context","readEventFromTransaction","web3","transaction","inputsABI","abi","find","entry","type","name","inputs","receipt","rawLogs","_","address","map","eth","decodeLog","data","topics","slice","TBTCConstants","TruffleContract","TBTCConstantsJSON","TBTCSystemContract","TBTCSystemJSON","TBTCDepositTokenContract","TBTCDepositTokenJSON","DepositContract","DepositJSON","DepositFactoryContract","DepositFactoryJSON","TBTCTokenContract","TBTCTokenJSON","FeeRebateTokenContract","FeeRebateTokenJSON","VendingMachineContract","VendingMachineJSON","ECDSAKeepContract","ECDSAKeepJSON","DepositFactory","config","_Users_jonathanschwartz_Documents_owl_hack_BTC_Defi_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","this","_Users_jonathanschwartz_Documents_owl_hack_BTC_Defi_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__","key","value","_withConfig","_Users_jonathanschwartz_Documents_owl_hack_BTC_Defi_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_Users_jonathanschwartz_Documents_owl_hack_BTC_Defi_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","statics","resolveContracts","BitcoinHelpers","setElectrumConfig","electrum","_x","apply","arguments","_availableSatoshiLotSizes","systemContract","getAllowedLotSizes","_withSatoshiLotSize","_callee3","satoshiLotSize","setStep1SigsRequired","deposit","_context3","isAllowedLotSize","t0","Error","t1","concat","t2","availableSatoshiLotSizes","t3","join","t4","call","t5","t6","Deposit","forLotSize","_x2","_x3","_withAddress","_callee4","depositAddress","_context4","forAddress","_x4","_x5","_resolveContracts","_callee5","init","contracts","_this","_context5","_ref","_ref2","_Users_jonathanschwartz_Documents_owl_hack_BTC_Defi_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","contract","propertyName","setProvider","currentProvider","deployed","then","all","_createNewDepositContract","_callee6","lotSize","funderBondAmount","accountBalance","result","createdEvent","_context6","constantsContract","getFunderBondAmount","getBalance","defaultAccount","lt","toString","depositFactoryContract","createDeposit","tokenContract","depositTokenContract","feeRebateTokenContract","vendingMachineContract","from","EthereumHelpers","JSON","stringify","_depositContractAddress","keepAddress","_keepAddress","_x6","factory","depositContract","keepContract","cb","length","undefined","activeStatePromise","waitForActiveState","publicKeyPoint","findOrWaitForPublicKeyPoint","bitcoinAddress","publicKeyPointToBitcoinAddress","bind","console","log","toNumber","createNewDepositContract","at","args","tdt","lotSizeSatoshis","ownerOf","getOwner","bitcoinAddressHandler","activeHandler","_this2","proofHandler","inActive","approve","tdtToTbtc","transferEvent","getSatoshiLotSize","expectedValue","Transaction","tx","getTxProofDifficultyFactor","requiredConfirmations","checkForConfirmations","confirmations","transactionID","constructFundingProof","proofArgs","unshift","push","unqualifiedDepositToTbtc","div","utils","toBN","pow","inVendingMachine","getOwnerRedemptionTbtcRequirement","ownerRedemptionRequirement","mul","add","getRedemptionTbtcRequirement","getLatestRedemptionDetails","details","Redemption","redeemerAddress","thisAccount","owner","belongsToThisAccount","redeemerPKH","Address","pubKeyHashFrom","getRedemptionCost","redemptionCost","balanceOf","availableBalance","gt","estimateFee","transactionFee","utxoSize","outputValue","sub","outputValueBytes","toArrayLike","Buffer","tbtcToBtc","requestRedemption","redemptionRequest","redemptionDetails","redemptionDetailsFromEvent","_this3","autoSubmitting","_ref4","_callee22","_context22","findOrWaitFor","waitForConfirmations","provideBTCFundingProof","_x15","readPublishedPubkeyEvent","signerPubkeyEvent","x","_signingGroupPubkeyX","y","_signingGroupPubkeyY","retrieveSignerPubkey","pubkeyTransaction","publicKeyPointToP2WPKHAddress","bitcoinNetwork","bitcoinTransaction","outputPosition","getSPVProof","parsedTransaction","merkleProof","chainHeaders","txInBlockIndex","version","txInVector","txOutVector","locktime","redemptionRequestedEventArgs","_utxoSize","_requesterPKH","_requestedFee","_outpoint","_digest","requesterPKH","requestedFee","outpoint","digest","deriveRoot","BcryptoMerkle","BitcoinSPV","electrumClient","_Users_jonathanschwartz_Documents_owl_hack_BTC_Defi_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","client","_Users_jonathanschwartz_Documents_owl_hack_BTC_Defi_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","_getTransactionProof","txHash","latestBlockHeight","txBlockHeight","headersChain","getTransaction","catch","err","getHeadersChain","getMerkleProof","hex","proof","position","_verifyMerkleProof","proofHex","index","blockHeight","actualRoot","branches","i","branch","txHashBuffer","expectedRoot","getMerkleRoot","Math","floor","reverse","Hash256","equals","__webpack_require__","d","BitcoinTxParser","bcoin_lib_primitives_index_js__WEBPACK_IMPORTED_MODULE_0__","bcoin_lib_primitives_index_js__WEBPACK_IMPORTED_MODULE_0___default","n","bufio__WEBPACK_IMPORTED_MODULE_1__","bufio__WEBPACK_IMPORTED_MODULE_1___default","bcoin_tx","BcoinPrimitives","TX","getTxVersion","buffer","bufio","write","writeU32","toHex","getTxInputVector","vectorToRaw","getTxOutputVector","outputs","getTxLocktime","elements","writeVarint","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","toWriter","return","render","parse","rawTx","fromRaw","sha256","Client","ElectrumClient","server","port","protocol","options","connect","close","blockchain_headers_subscribe","header","height","blockchain_transaction_get","rawTX","blockchain_transaction_broadcast","script","scriptHash","scriptToHash","blockchain_scripthash_listunspent","listUnspent","callback","blockchain_scripthash_subscribe","initialStatus","blockchain_scripthash_unsubscribe","_callee8","listener","_context8","_callee7","msg","receivedScriptHash","status","_result","_context7","subscribe","off","_x7","on","blockHeader","_ref3","_callee11","_context11","_callee10","messages","_result2","_context10","finish","_x10","_x9","blockchain_block_header","fromHex","blockchain_block_headers","blockchain_transaction_getMerkle","merkle","forEach","item","pos","vout","scriptPubKey","addresses","bytes","module","exports","p","webpackEmptyContext","req","e","code","keys","id","QRCode","depositHandler","_useState","useState","_useState2","slicedToArray","setBitcoinAddress","useEffect","toCanvas","document","getElementById","react_default","createElement","determineHelperText","sigsRequired","submittedInitialDepositAmount","pendingDepositAddress","ctbtcABI","require","tbtcABI","provider","Fortmatic","getProvider","Web3","onBTCAddressResolution","_ref11","asyncToGenerator","regenerator_default","setStep","setLoading","setTxInFlight","useLotsAndTbtcHandler","setError","setLots","setTbtcHandler","_ref7","_ref8","_ref9","tbtc","lotSizes","getAccounts","ethereum","enable","message","TBTC","withConfig","testnet","testnetPublic","testnetWS","getLots","getLotsAndTbtcHandler","useBTCDepositListeners","setSubmitting","submitting","onActive","mintTBTC","registerBTCDepositListeners","AwesomeButton","styled","StyleButton","_templateObject","window","myTheme","radioButton","check","color","global","font","family","StyledDots","img","_templateObject2","StyledNumber","_templateObject3","HeaderText","_templateObject4","StyledHeading","Heading","_templateObject5","UnderHeader","_templateObject6","approveCtbcContract","currentAddress","tbtcTokenContract","Contract","methods","send","error","convertTbtcToCbtc","mintAmount","cTBTCContract","numCtbtcToMint","ctoken","toWei","mint","MobileCol","Col","_templateObject7","toBtcSize","largeNum","StepComponent","image","loading","headerText","stepDone","style","objectSpread","display","marginRight","src","Done","alt","index_es","size","marginLeft","marginTop","App","step","_useState3","_useState4","_useState5","_useState6","step1SigsRequired","_useState7","_useState8","setSubmittedInitialDepositAmount","_useState9","_useState10","txInFlight","_useState11","_useState12","_useState13","_useState14","lots","_useState15","_useState16","_useState17","_useState18","tbtcHandler","_useState19","_useState20","setDepositHandler","_useState21","_useState22","_useState23","_useState24","depositSatoshiAmount","setDepositSatoshiAmount","_useState25","_useState26","setMintAmount","_getAddressAndBalance","setCurrentAddress","CTBTC","balances","setBalances","_ref5","_ref6","currentAccount","_TBTC","balanceOfUnderlying","fetchBalances","getAddressAndBalances","_use3Box","setPendingDepositAddress","tbtcDepositSpace","setTbtcDepositSpace","box","spaces","Box","create","auth","openSpace","syncDone","public","get","fetchInfoFrom3Box","use3Box","listenForPendingDeposits","_ref12","withAddress","usePendingDeposit","Grommet","theme","Header","pad","textAlign","borderBottom","onClick","remove","Container","paddingTop","Row","md","sm","Dots","App_StepComponent","One","Fragment","lot","RadioButton","checked","onChange","label","button-default-border-radius","disabled","lte","onPress","withSatoshiLotSize","set","Two","shouldDisplay","TextInput","target","ReactDOM","src_App_0","BitcoinNetwork","TESTNET","MAINNET","defaultConfig","isMainnet","depositFactory","networkMatchCheck","chainId","_withConfig2","_args2","withdrawnEmitter","EventEmitter","unsignedTransactionDetails","constructOneInputOneOutputWitnessTransaction","replace","signedTransaction","redemptionDigest","signatureEvent","_signatureEvent$args","r","s","debug","addWitnessSignature","publicKeyPointToPublicKeyString","requesterAddress","pubKeyHashToBech32","broadcast","proveWithdrawal","provableTransaction","provideRedemptionProof","emit","transactionHandler","withdrawalHandler","existingRedemptionDetails","KeyRing","Script","BcoinScript","electrumConfig","newConfig","signatureDER","secp256k1","signature","BcryptoSignature","bitcoinSignature","signatureNormalize","encode","toDER","publicKeyX","publicKeyY","bcoin","fromAddress","getWitnessPubkeyhash","publicKeyToP2WPKHAddress","pubKeyHash","network","fromProgram","getAddress","toBech32","publicKeyString","publicKeyBytes","publicKey","publicKeyImport","keyRing","fromKey","getKeyHash","toScript","toRaw","withElectrumClient","_withElectrumClient","block","_find","findWithClient","_findOrWaitFor","checkTransactions","onTransactionToScript","_checkForConfirmations","checkForConfirmationsWithClient","_x8","_waitForConfirmations","_callee9","checkConfirmations","_context9","onNewBlock","_x13","_x11","_x12","_estimateFee","tbtcConstantsContract","getMinimumRedemptionFee","_x14","parseRaw","rawTransaction","_getSPVProof","_callee13","_context13","_callee12","spv","_context12","getTransactionProof","_Users_jonathanschwartz_Documents_owl_hack_BTC_Defi_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","_x17","_x16","_broadcast","_callee15","_context15","_callee14","_context14","broadcastTransaction","_x19","_x18","unsignedTransaction","inputIndex","compressedPublicKey","hashType","ALL","sig","clone","witness","fromItems","previousOutpoint","inputSequence","outputPKH","prevOutpoint","Outpoint","input","Input","fromOptions","prevout","sequence","outputScript","output","Output","_findWithClient","_callee16","receiverScript","unspentTransactions","_context16","getUnspentToScript","tx_hash","tx_pos","_x20","_x21","_x22","_checkForConfirmationsWithClient","_callee17","_context17","_x23","_x24","_x25"],"mappings":"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","file":"static/js/main.5a764c66.chunk.js","sourcesContent":["/**\n * From a given transaction result, extracts the first event with the given\n * name from the given source contract.\n * \n * @param {Web3} web3 A web3 instance for operating.\n * @param {Result} transaction A web3 transaction result.\n * @param {TruffleContract} sourceContract A TruffleContract instance whose\n *        event is being read.\n * @param {string} eventName The name of the event to be read.\n * \n * @return The event as read from the transaction's raw logs; note that this\n *         event has a different structure than the event passed to event\n *         handlers---it returns the equivalent of `event.args` from event\n *         handlers.\n */\nfunction readEventFromTransaction(web3, transaction, sourceContract, eventName) {\n    const inputsABI = sourceContract.abi.find(\n        (entry) => entry.type == \"event\" && entry.name == eventName\n    ).inputs\n\n    return transaction.receipt.rawLogs.\n        filter((_) => _.address == sourceContract.address).\n        map((_) => web3.eth.abi.decodeLog(inputsABI, _.data, _.topics.slice(1)))\n        [0]\n}\n\n/**\n * Waits until `source` emits the given `event`, including searching past blocks\n * for such `event`, then returns it.\n *\n * @param {TruffleContract} sourceContract The TruffleContract that emits the event.\n * @param {string} eventName The name of the event to wait on.\n * @param {object} filter An additional filter to apply to the event being\n *        searched for.\n *\n * @return A promise that will be fulfilled by the event object once it is\n *         received.\n */\nfunction getEvent(sourceContract, eventName, filter) {\n    return new Promise((resolve) => {\n        sourceContract[eventName](filter).once(\"data\", (event) => {\n            clearInterval(handle);\n            resolve(event)\n        })\n\n        // As a workaround for a problem with MetaMask version 7.1.1 where subscription\n        // for events doesn't work correctly we pull past events in a loop until\n        // we find our event. This is a temporary solution which should be removed\n        // after problem with MetaMask is solved.\n        // See: https://github.com/MetaMask/metamask-extension/issues/7270\n        const handle = setInterval(\n            async function() {\n                // Query if an event was already emitted after we start watching\n                const event = await getExistingEvent(\n                    sourceContract,\n                    eventName,\n                    filter,\n                )\n\n                if (event) {\n                    clearInterval(handle)\n                    resolve(event)\n                }\n            },\n            3000, // every 3 seconds\n        )\n    })\n}\n\nasync function getExistingEvent(source, eventName, filter) {\n    const events = await source.getPastEvents(\n        eventName,\n        {\n            fromBlock: 0,\n            toBlock: 'latest',\n            filter,\n        }\n    )\n\n    return events[0]\n}\n\nexport default {\n    getEvent,\n    getExistingEvent,\n    readEventFromTransaction,\n}\n","import BitcoinHelpers from \"./BitcoinHelpers.js\";\n\nimport EthereumHelpers from \"./EthereumHelpers.js\";\n\nimport TruffleContract from \"@truffle/contract\";\n\nimport Redemption from \"./Redemption.js\";\n\nimport TBTCConstantsJSON from \"@keep-network/tbtc/artifacts/TBTCConstants.json\";\nimport TBTCSystemJSON from \"@keep-network/tbtc/artifacts/TBTCSystem.json\";\nimport TBTCDepositTokenJSON from \"@keep-network/tbtc/artifacts/TBTCDepositToken.json\";\nimport DepositJSON from \"@keep-network/tbtc/artifacts/Deposit.json\";\nimport DepositLogJSON from \"@keep-network/tbtc/artifacts/DepositLog.json\";\nimport DepositFactoryJSON from \"@keep-network/tbtc/artifacts/DepositFactory.json\";\nimport TBTCTokenJSON from \"@keep-network/tbtc/artifacts/TBTCToken.json\";\nimport FeeRebateTokenJSON from \"@keep-network/tbtc/artifacts/FeeRebateToken.json\";\nimport VendingMachineJSON from \"@keep-network/tbtc/artifacts/VendingMachine.json\";\nimport ECDSAKeepJSON from \"@keep-network/tbtc/artifacts/ECDSAKeep.json\";\nconst TBTCConstants = TruffleContract(TBTCConstantsJSON);\nconst TBTCSystemContract = TruffleContract(TBTCSystemJSON);\nconst TBTCDepositTokenContract = TruffleContract(TBTCDepositTokenJSON);\nconst DepositContract = TruffleContract(DepositJSON);\nconst DepositFactoryContract = TruffleContract(DepositFactoryJSON);\nconst TBTCTokenContract = TruffleContract(TBTCTokenJSON);\nconst FeeRebateTokenContract = TruffleContract(FeeRebateTokenJSON);\nconst VendingMachineContract = TruffleContract(VendingMachineJSON);\nconst ECDSAKeepContract = TruffleContract(ECDSAKeepJSON);\n\nexport class DepositFactory {\n  // config/*: TBTCConfig*/;\n\n  // constantsContract/*: any */;\n  // systemContract/*: any*/;\n  // tokenContract/*: any */;\n  // depositTokenContract/*: any*/;\n  // feeRebateTokenContract/*: any */;\n  // depositContract/*: any*/;\n  // depositLogContract/*: any*/;\n  // depositFactoryContract/*: any */;\n  // vendingMachineContract/*: any */;\n\n  static async withConfig(\n    config /*: TBTCConfig)*/\n  ) /*: Promise<DepositFactory>*/ {\n    const statics = new DepositFactory(config);\n    await statics.resolveContracts();\n\n    BitcoinHelpers.setElectrumConfig(config.electrum);\n\n    return statics;\n  }\n\n  constructor(config /*: TBTCConfig*/) {\n    this.config = config;\n  }\n\n  async availableSatoshiLotSizes() /*: Promise<BN[]>*/ {\n    return await this.systemContract.getAllowedLotSizes();\n  }\n\n  /**\n   * Opens a new deposit with the given lot size in satoshis and returns a\n   * Deposit handle to it. If the lot size is not currently permitted by the\n   * tBTC system, throws an error. If a contract issue occurs during the\n   * opening of the deposit, throws an issue.\n   *\n   * To follow along once the deposit is initialized, see the `Deposit` API.\n   *\n   * @param satoshiLotSize The lot size, in satoshis, of the deposit. Must be\n   *        in the list of allowed lot sizes from Deposit.availableLotSizes().\n   */\n  async withSatoshiLotSize(\n    satoshiLotSize /*: BN*/,\n    setStep1SigsRequired\n  ) /*: Promise<Deposit>*/ {\n    if (!(await this.systemContract.isAllowedLotSize(satoshiLotSize))) {\n      throw new Error(\n        `Lot size ${satoshiLotSize} is not permitted; only ` +\n          `one of ${(await this.availableSatoshiLotSizes()).join(\",\")} ` +\n          `can be used.`\n      );\n    }\n\n    const deposit = Deposit.forLotSize(\n      this,\n      satoshiLotSize,\n      setStep1SigsRequired\n    );\n    return deposit;\n  }\n\n  async withAddress(depositAddress, setStep1SigsRequired) {\n    return await Deposit.forAddress(this, depositAddress, setStep1SigsRequired);\n  }\n\n  // Await the deployed() functions of all contract dependencies.\n  async resolveContracts() {\n    const init = ([contract, propertyName]) => {\n      contract.setProvider(this.config.web3.currentProvider);\n      return contract.deployed().then(_ => (this[propertyName] = _));\n    };\n\n    const contracts = [\n      [TBTCConstants, \"constantsContract\"],\n      [TBTCSystemContract, \"systemContract\"],\n      [TBTCTokenContract, \"tokenContract\"],\n      [TBTCDepositTokenContract, \"depositTokenContract\"],\n      [FeeRebateTokenContract, \"feeRebateTokenContract\"],\n      [DepositContract, \"depositContract\"],\n      [DepositFactoryContract, \"depositFactoryContract\"],\n      [VendingMachineContract, \"vendingMachineContract\"]\n    ];\n\n    await Promise.all(contracts.map(init));\n  }\n\n  /**\n   * INTERNAL USE ONLY\n   *\n   * Initializes a new deposit and returns a tuple of the deposit contract\n   * address and the associated keep address.\n   */\n  async createNewDepositContract(lotSize /*: BN */) {\n    const funderBondAmount = await this.constantsContract.getFunderBondAmount();\n    const accountBalance = await this.config.web3.eth.getBalance(\n      this.config.web3.eth.defaultAccount\n    );\n    if (funderBondAmount.lt(accountBalance)) {\n      throw `Insufficient balance ${accountBalance.toString()} to open ` +\n        `deposit (required: ${funderBondAmount.toString()}).`;\n    }\n\n    const result = await this.depositFactoryContract.createDeposit(\n      this.systemContract.address,\n      this.tokenContract.address,\n      this.depositTokenContract.address,\n      this.feeRebateTokenContract.address,\n      this.vendingMachineContract.address,\n      1,\n      1,\n      lotSize,\n      {\n        from: this.config.web3.eth.defaultAccount,\n        value: funderBondAmount\n      }\n    );\n\n    const createdEvent = EthereumHelpers.readEventFromTransaction(\n      this.config.web3,\n      result,\n      this.systemContract,\n      \"Created\"\n    );\n    if (!createdEvent) {\n      throw new Error(\n        `Transaction failed to include keep creation event. ` +\n          `Transaction was: ${JSON.stringify(result)}.`\n      );\n    }\n\n    return {\n      depositAddress: createdEvent._depositContractAddress,\n      keepAddress: createdEvent._keepAddress\n    };\n  }\n}\n\n// Bitcoin address handlers are given the deposit's Bitcoin address.\n// type BitcoinAddressHandler = (address: string)=>void)=>void\n// Active handlers are given the deposit that just entered the ACTIVE state.\n// type ActiveHandler = (deposit: Deposit)=>void\n\nexport default class Deposit {\n  // factory/*: DepositFactory*/;\n  // address/*: string*/;\n  // keepContract/*: string*/;\n  // contract/*: any*/;\n\n  // bitcoinAddress/*: Promise<string>*/;\n  // activeStatePromise/*: Promise<[]>*/; // fulfilled when deposit goes active\n\n  static async forLotSize(\n    factory /*: DepositFactory*/,\n    satoshiLotSize /*: BN*/,\n    cb = () => {}\n  ) /*: Promise<Deposit>*/ {\n    console.log(\n      \"Creating new deposit contract with lot size\",\n      satoshiLotSize.toNumber(),\n      \"satoshis...\"\n    );\n    const {\n      depositAddress,\n      keepAddress\n    } = await factory.createNewDepositContract(satoshiLotSize);\n    cb(1);\n    console.log(\n      `Looking up new deposit with address ${depositAddress} backed by ` +\n        `keep at address ${keepAddress}...`\n    );\n    const contract = await DepositContract.at(depositAddress);\n\n    ECDSAKeepContract.setProvider(factory.config.web3.currentProvider);\n    const keepContract = await ECDSAKeepContract.at(keepAddress);\n\n    return new Deposit(factory, contract, keepContract, cb);\n  }\n\n  static async forAddress(\n    factory /*: DepositFactory*/,\n    address /*: string*/,\n    setStep1SigsRequired\n  ) /*: Promise<Deposit>*/ {\n    console.log(`Looking up Deposit contract at address ${address}...`);\n    const contract = await DepositContract.at(address);\n\n    console.log(`Looking up Created event for deposit ${address}...`);\n    const createdEvent = await EthereumHelpers.getExistingEvent(\n      factory.systemContract,\n      \"Created\",\n      { _depositContractAddress: address }\n    );\n    if (!createdEvent) {\n      throw new Error(\n        `Could not find creation event for deposit at address ${address}.`\n      );\n    }\n\n    console.log(`Found keep address ${createdEvent.args._keepAddress}.`);\n    ECDSAKeepContract.setProvider(factory.config.web3.currentProvider);\n    const keepContract = await ECDSAKeepContract.at(\n      createdEvent.args._keepAddress\n    );\n\n    return new Deposit(factory, contract, keepContract, setStep1SigsRequired);\n  }\n\n  static async forTDT(\n    factory /*: DepositFactory*/,\n    tdt /*: TBTCDepositToken | string*/\n  ) /*: Promise<Deposit>*/ {\n    return new Deposit(factory, \"\");\n  }\n\n  constructor(\n    factory /*: DepositFactory*/,\n    depositContract /*: TruffleContract*/,\n    keepContract /*: TruffleContract */,\n    cb = () => {}\n  ) {\n    if (!keepContract) {\n      throw \"Keep contract required for Deposit instantiation.\";\n    }\n\n    this.factory = factory;\n    this.address = depositContract.address;\n    this.keepContract = keepContract;\n    this.contract = depositContract;\n\n    // Set up state transition promises.\n    this.activeStatePromise = this.waitForActiveState();\n\n    this.publicKeyPoint = this.findOrWaitForPublicKeyPoint(cb);\n    this.bitcoinAddress = this.publicKeyPoint.then(\n      this.publicKeyPointToBitcoinAddress.bind(this)\n    );\n  }\n\n  ///------------------------------- Accessors -------------------------------\n\n  /**\n   * Returns a promise that resolves to the lot size of the deposit, in\n   * satoshis.\n   */\n  async getSatoshiLotSize() {\n    return await this.contract.lotSizeSatoshis();\n  }\n\n  /**\n   * Returns a promise that resolves to the Bitcoin address for the wallet\n   * backing this deposit. May take an extended amount of time if this deposit\n   * has just been created.\n   */\n  async getBitcoinAddress() {\n    return await this.bitcoinAddress;\n  }\n\n  async getTDT() /*: Promise<TBTCDepositToken>*/ {\n    return {};\n  }\n\n  async getFRT() /*: Promise<FeeRebateToken | null>*/ {\n    return {};\n  }\n\n  async getOwner() /*: Promise<string>*/ /* ETH address */ {\n    return await this.factory.depositTokenContract.ownerOf(this.address);\n  }\n\n  async inVendingMachine() /*: Promise<boolean>*/ {\n    return (\n      (await this.getOwner()) == this.factory.vendingMachineContract.address\n    );\n  }\n\n  ///---------------------------- Event Handlers -----------------------------\n\n  /**\n   * Registers a handler for notification when a Bitcoin address is available\n   * for this deposit. The handler receives the deposit signer wallet's\n   * address.\n   *\n   * @param bitcoinAddressHandler A function that takes a bitcoin address\n   *        corresponding to this deposit's signer wallet. Note that\n   *        exceptions in this handler are not managed, so the handler itself\n   *        should deal with its own failure possibilities.\n   */\n  onBitcoinAddressAvailable(bitcoinAddressHandler /*: BitcoinAddressHandler*/) {\n    this.bitcoinAddress.then(bitcoinAddressHandler);\n  }\n\n  /**\n   * Registers a handler for notification when the deposit enters the ACTIVE\n   * state, when it has been proven funded and becomes eligible for TBTC\n   * minting and other uses. The deposit itself is passed to the handler.\n   *\n   * @param activeHandler A handler called when this deposit enters the ACTIVE\n   *        state; receives the deposit as its only parameter. Note that\n   *        exceptions in this handler are not managed, so the handler itself\n   *        should deal with its own failure possibilities.\n   */\n  onActive(activeHandler /*: (Deposit)=>void*/) {\n    this.activeStatePromise.then(() => {\n      activeHandler(this);\n    });\n  }\n\n  onReadyForProof(proofHandler /*: (prove)=>void*/) {\n    // prove(txHash) is a thing, will submit funding proof for the given\n    // Bitcoin txHash; no verification initially.\n  }\n\n  ///--------------------------- Deposit Actions -----------------------------\n\n  /**\n   * Mints TBTC from this deposit by giving ownership of it to the tBTC\n   * Vending Machine contract in exchange for TBTC. Requires that the deposit\n   * already be qualified, i.e. in the ACTIVE state.\n   *\n   * @return A promise to the amount of TBTC that was minted to the deposit\n   *         owner.\n   */\n  async mintTBTC() /*: Promise<BN>*/ {\n    if (!(await this.contract.inActive())) {\n      throw new Error(\n        \"Can't mint TBTC with a deposit that isn't in ACTIVE state.\"\n      );\n    }\n\n    console.log(\n      `Approving transfer of deposit ${this.address} TDT to Vending Machine...`\n    );\n    await this.factory.depositTokenContract.approve(\n      this.factory.vendingMachineContract.address,\n      this.address,\n      { from: this.factory.config.web3.eth.defaultAccount }\n    );\n\n    console.log(`Minting TBTC...`);\n    const transaction = await this.factory.vendingMachineContract.tdtToTbtc(\n      this.address,\n      { from: this.factory.config.web3.eth.defaultAccount }\n    );\n\n    // return TBTC minted amount\n    const transferEvent = EthereumHelpers.readEventFromTransaction(\n      this.factory.config.web3,\n      transaction,\n      this.factory.tokenContract,\n      \"Transfer\"\n    );\n\n    console.log(`Found Transfer event for`, transferEvent.value, `TBTC.`);\n    return transferEvent.value;\n  }\n\n  /**\n   * Finds a funding transaction to this deposit's funding address with the\n   * appropriate number of confirmations, then calls the tBTC Vending\n   * Machine's shortcut function to simultaneously qualify the deposit and\n   * mint TBTC off of it, transferring ownership of the deposit to the\n   * Vending Machine.\n   *\n   * @return A promise to the amount of TBTC that was minted to the deposit\n   *         owner.\n   *\n   * @throws When there is no existing Bitcoin funding transaction with the\n   *         appropriate number of confirmations, or if there is an issue\n   *         in the Vending Machine's qualification + minting process.\n   */\n  async qualifyAndMintTBTC() /*: Promise<BN>*/ {\n    const address = await this.bitcoinAddress;\n    const expectedValue = (await this.getSatoshiLotSize()).toNumber();\n    const tx = await BitcoinHelpers.Transaction.find(address, expectedValue);\n    if (!tx) {\n      throw new Error(\n        `Funding transaction not found for deposit ${this.address}.`\n      );\n    }\n\n    const requiredConfirmations = (\n      await this.factory.constantsContract.getTxProofDifficultyFactor()\n    ).toNumber();\n    const confirmations = await BitcoinHelpers.Transaction.checkForConfirmations(\n      tx,\n      requiredConfirmations\n    );\n    if (!confirmations) {\n      throw new Error(\n        `Funding transaction did not have sufficient confirmations; ` +\n          `expected ${requiredConfirmations.toNumber()}.`\n      );\n    }\n\n    console.log(\n      `Approving transfer of deposit ${this.address} TDT to Vending Machine...`\n    );\n    await this.factory.depositTokenContract.approve(\n      this.factory.vendingMachineContract.address,\n      this.address,\n      { from: this.factory.config.web3.eth.defaultAccount }\n    );\n\n    console.log(\n      `Qualifying and minting off of deposit ${this.address} for ` +\n        `Bitcoin transaction ${tx.transactionID}...`,\n      tx,\n      confirmations\n    );\n    const proofArgs = await this.constructFundingProof(\n      tx,\n      requiredConfirmations\n    );\n    proofArgs.unshift(this.address);\n    proofArgs.push({ from: this.factory.config.web3.eth.defaultAccount });\n    const transaction = await this.factory.vendingMachineContract.unqualifiedDepositToTbtc.apply(\n      this.factory.vendingMachineContract,\n      proofArgs\n    );\n\n    // return TBTC minted amount\n    const transferEvent = EthereumHelpers.readEventFromTransaction(\n      this.factory.config.web3,\n      transaction,\n      this.factory.tokenContract,\n      \"Transfer\"\n    );\n\n    return transferEvent.value.div(\n      this.factory.config.web3.utils.toBN(10).pow(18)\n    );\n  }\n\n  /**\n   * Returns the cost, in TBTC, to redeem this deposit. If the deposit is in\n   * the tBTC Vending Machine, includes the cost of retrieving it from the\n   * Vending Machine.\n   *\n   * @return A promise to the amount of TBTC needed to redeem this deposit.\n   */\n  async getRedemptionCost() /*: Promise<BN>*/ {\n    if (await this.inVendingMachine()) {\n      const ownerRedemptionRequirement = await this.contract.getOwnerRedemptionTbtcRequirement(\n        this.factory.config.web3.eth.defaultAccount\n      );\n      const lotSize = await this.getSatoshiLotSize();\n\n      const toBN = this.factory.config.web3.utils.toBN;\n      return lotSize\n        .mul(toBN(10).pow(toBN(10)))\n        .add(ownerRedemptionRequirement);\n    } else {\n      return await this.contract.getRedemptionTbtcRequirement(\n        this.factory.config.web3.eth.defaultAccount\n      );\n    }\n  }\n\n  async getCurrentRedemption() /*: Promise<Redemption?>*/ {\n    const details = await this.getLatestRedemptionDetails();\n\n    return new Redemption(this, details);\n  }\n\n  async requestRedemption(\n    redeemerAddress /*: string /* bitcoin address */\n  ) /*: Promise<Redemption>*/ {\n    const inVendingMachine = await this.inVendingMachine();\n    const thisAccount = this.factory.config.web3.eth.defaultAccount;\n    const owner = await this.getOwner();\n    const belongsToThisAccount = owner == thisAccount;\n\n    if (!inVendingMachine && !belongsToThisAccount) {\n      throw new Error(\n        `Redemption is currently only supported for deposits owned by ` +\n          `this account (${thisAccount}) or the tBTC Vending Machine ` +\n          `(${this.factory.vendingMachineContract.address}). This ` +\n          `deposit is owned by ${owner}.`\n      );\n    }\n\n    const redeemerPKH = BitcoinHelpers.Address.pubKeyHashFrom(redeemerAddress);\n    if (redeemerPKH === null) {\n      throw new Error(\n        `${redeemerAddress} is not a P2WPKH address. Currently only ` +\n          `P2WPKH addresses are supported for redemption.`\n      );\n    }\n\n    const redemptionCost = await this.getRedemptionCost();\n    const availableBalance = await this.factory.tokenContract.balanceOf(\n      thisAccount\n    );\n    if (redemptionCost.gt(availableBalance)) {\n      throw new Error(\n        `Account ${thisAccount} does not have the required balance of ` +\n          `${redemptionCost.toString()} to redeem; it only has ` +\n          `${availableBalance.toString()} available.`\n      );\n    }\n\n    const toBN = this.factory.config.web3.utils.toBN;\n    console.log(\n      `Looking up UTXO size and transaction fee for redemption transaction...`\n    );\n    const transactionFee = await BitcoinHelpers.Transaction.estimateFee(\n      this.factory.constantsContract\n    );\n    const utxoSize = await this.contract.utxoSize();\n    const outputValue = toBN(utxoSize).sub(toBN(transactionFee));\n    const outputValueBytes = outputValue.toArrayLike(Buffer, \"le\", 8);\n\n    let transaction;\n    if (inVendingMachine) {\n      console.log(\n        `Approving transfer of ${redemptionCost} to the vending machine....`\n      );\n      this.factory.tokenContract.approve(\n        this.factory.vendingMachineContract.address,\n        redemptionCost,\n        { from: thisAccount }\n      );\n\n      console.log(\n        `Initiating redemption of deposit ${this.address} from ` +\n          `vending machine...`\n      );\n      transaction = await this.factory.vendingMachineContract.tbtcToBtc(\n        this.address,\n        outputValueBytes,\n        redeemerPKH,\n        thisAccount,\n        { from: thisAccount }\n      );\n    } else {\n      console.log(`Approving transfer of ${redemptionCost} to the deposit...`);\n      this.factory.tokenContract.approve(this.address, redemptionCost, {\n        from: thisAccount\n      });\n\n      console.log(`Initiating redemption from deposit ${this.address}...`);\n      transaction = await this.contract.requestRedemption(\n        outputValueBytes,\n        redeemerPKH,\n        { from: thisAccount }\n      );\n    }\n\n    const redemptionRequest = EthereumHelpers.readEventFromTransaction(\n      this.factory.config.web3,\n      transaction,\n      this.factory.systemContract,\n      \"RedemptionRequested\"\n    );\n    const redemptionDetails = this.redemptionDetailsFromEvent(\n      redemptionRequest\n    );\n\n    return new Redemption(this, redemptionDetails);\n  }\n\n  /**\n   * Fetches the latest redemption details from the chain. These can change\n   * after fee bumps.\n   *\n   * Returns a promise to the redemption details, or to null if there is no\n   * current redemption in progress.\n   */\n  async getLatestRedemptionDetails() {\n    // If the contract is ACTIVE, there's definitely no redemption. This can\n    // be generalized to a state check that the contract is either\n    // AWAITING_WITHDRAWAL_SIGNATURE or AWAITING_WITHDRAWAL_PROOF, but let's\n    // hold on that for now.\n    if (await this.contract.inActive()) {\n      return null;\n    }\n\n    const redemptionRequest = await EthereumHelpers.getExistingEvent(\n      this.factory.systemContract,\n      \"RedemptionRequested\",\n      { _depositContractAddress: this.address }\n    );\n\n    if (!redemptionRequest) {\n      return null;\n    }\n\n    return this.redemptionDetailsFromEvent(redemptionRequest.args);\n  }\n\n  ///------------------------------- Helpers ---------------------------------\n\n  // autoSubmitting/*: boolean*/\n  /**\n   * This method enables the deposit's auto-submission capabilities. In\n   * auto-submit mode, the deposit will automatically monitor for a new\n   * Bitcoin transaction to the deposit signers' Bitcoin wallet, then watch\n   * that transaction until it has accumulated sufficient work for proof\n   * of funding to be submitted to the deposit, then submit that proof to the\n   * deposit to qualify it and move it into the ACTIVE state.\n   *\n   * Without calling this function, the deposit will do none of those things;\n   * instead, the caller will be in charge of managing (or choosing not to)\n   * this process. This can be useful, for example, if a dApp wants to open\n   * a deposit, then transfer the deposit to a service provider who will\n   * handle deposit qualification.\n   */\n  autoSubmit() {\n    // Only enable auto-submitting once.\n    if (this.autoSubmitting) {\n      return;\n    }\n    this.autoSubmitting = true;\n\n    this.bitcoinAddress.then(async address => {\n      const expectedValue = (await this.getSatoshiLotSize()).toNumber();\n\n      console.log(\n        `Monitoring Bitcoin for transaction to address ${address}...`\n      );\n      const tx = await BitcoinHelpers.Transaction.findOrWaitFor(\n        address,\n        expectedValue\n      );\n      // TODO issue event when we find a tx\n\n      const requiredConfirmations = (\n        await this.factory.constantsContract.getTxProofDifficultyFactor()\n      ).toNumber();\n\n      console.log(\n        `Waiting for ${requiredConfirmations} confirmations for ` +\n          `Bitcoin transaction ${tx.transactionID}...`\n      );\n      await BitcoinHelpers.Transaction.waitForConfirmations(\n        tx,\n        requiredConfirmations\n      );\n\n      console.log(\n        `Submitting funding proof to deposit ${this.address} for ` +\n          `Bitcoin transaction ${tx.transactionID}...`\n      );\n      const proofArgs = await this.constructFundingProof(\n        tx,\n        requiredConfirmations\n      );\n      proofArgs.push({ from: this.factory.config.web3.eth.defaultAccount });\n      this.contract.provideBTCFundingProof.apply(this.contract, proofArgs);\n    });\n  }\n\n  // Finds an existing event from the keep backing the Deposit to access the\n  // keep's public key, then submits it to the deposit to transition from\n  // state AWAITING_SIGNER_SETUP to state AWAITING_BTC_FUNDING_PROOF and\n  // provide access to the Bitcoin address for the deposit.\n  //\n  // Note that the client must do this public key submission to the deposit\n  // manually; the deposit is not currently informed by the Keep of its newly-\n  // generated pubkey for a variety of reasons.\n  //\n  // Returns a promise that will be fulfilled once the public key is\n  // available, with a public key point with x and y properties.\n  async findOrWaitForPublicKeyPoint(cb = () => {}) {\n    let signerPubkeyEvent = await this.readPublishedPubkeyEvent();\n    if (signerPubkeyEvent) {\n      cb(0);\n      console.log(\n        `Found existing Bitcoin address for deposit ${this.address}...`\n      );\n      return {\n        x: signerPubkeyEvent.args._signingGroupPubkeyX,\n        y: signerPubkeyEvent.args._signingGroupPubkeyY\n      };\n    }\n\n    console.log(`Waiting for deposit ${this.address} keep public key...`);\n\n    // Wait for the Keep to be ready.\n    await EthereumHelpers.getEvent(this.keepContract, \"PublicKeyPublished\");\n\n    console.log(\n      `Waiting for deposit ${this.address} to retrieve public key...`\n    );\n    // Ask the deposit to fetch and store the signer pubkey.\n    const pubkeyTransaction = await this.contract.retrieveSignerPubkey({\n      from: this.factory.config.web3.eth.defaultAccount\n    });\n\n    cb(0);\n\n    console.log(`Found public key for deposit ${this.address}...`);\n    const {\n      _signingGroupPubkeyX,\n      _signingGroupPubkeyY\n    } = EthereumHelpers.readEventFromTransaction(\n      this.factory.config.web3,\n      pubkeyTransaction,\n      this.factory.systemContract,\n      \"RegisteredPubkey\"\n    );\n\n    return {\n      x: _signingGroupPubkeyX,\n      y: _signingGroupPubkeyY\n    };\n  }\n\n  // Returns a promise that is fulfilled when the contract has entered the\n  // active state.\n  async waitForActiveState() {\n    const depositIsActive = await this.contract.inActive();\n    if (depositIsActive) {\n      return true;\n    }\n\n    console.log(`Monitoring deposit ${this.address} for transition to ACTIVE.`);\n\n    // If we weren't active, wait for Funded, then mark as active.\n    // FIXME/NOTE: We could be inactive due to being outside of the funding\n    // FIXME/NOTE: path, e.g. in liquidation or courtesy call.\n    await EthereumHelpers.getEvent(this.factory.systemContract, \"Funded\", {\n      _depositContractAddress: this.address\n    });\n    console.log(`Deposit ${this.address} transitioned to ACTIVE.`);\n\n    return true;\n  }\n\n  async readPublishedPubkeyEvent() {\n    return EthereumHelpers.getExistingEvent(\n      this.factory.systemContract,\n      \"RegisteredPubkey\",\n      { _depositContractAddress: this.address }\n    );\n  }\n\n  async publicKeyPointToBitcoinAddress(publicKeyPoint) {\n    return BitcoinHelpers.Address.publicKeyPointToP2WPKHAddress(\n      publicKeyPoint.x,\n      publicKeyPoint.y,\n      this.factory.config.bitcoinNetwork\n    );\n  }\n\n  // Given a Bitcoin transaction and the number of confirmations that need to\n  // be proven constructs an SPV proof and returns the raw parameters that\n  // would be given to an on-chain contract.\n  //\n  // These are:\n  // - version\n  // - txInVector\n  // - txOutVector\n  // - locktime\n  // - outputPosition\n  // - merkleProof\n  // - txInBlockIndex\n  // - chainHeaders\n  //\n  // Constructed this way to serve both qualify + mint and simple\n  // qualification flows.\n  async constructFundingProof(bitcoinTransaction, confirmations) {\n    const { transactionID, outputPosition } = bitcoinTransaction;\n    const {\n      parsedTransaction,\n      merkleProof,\n      chainHeaders,\n      txInBlockIndex\n    } = await BitcoinHelpers.Transaction.getSPVProof(\n      transactionID,\n      confirmations\n    );\n\n    const { version, txInVector, txOutVector, locktime } = parsedTransaction;\n\n    return [\n      Buffer.from(version, \"hex\"),\n      Buffer.from(txInVector, \"hex\"),\n      Buffer.from(txOutVector, \"hex\"),\n      Buffer.from(locktime, \"hex\"),\n      outputPosition,\n      Buffer.from(merkleProof, \"hex\"),\n      txInBlockIndex,\n      Buffer.from(chainHeaders, \"hex\")\n    ];\n  }\n\n  redemptionDetailsFromEvent(\n    redemptionRequestedEventArgs\n  ) /*: RedemptionDetails*/ {\n    const {\n      _utxoSize,\n      _requesterPKH,\n      _requestedFee,\n      _outpoint,\n      _digest\n    } = redemptionRequestedEventArgs;\n\n    const toBN = this.factory.config.web3.utils.toBN;\n    return {\n      utxoSize: toBN(_utxoSize),\n      requesterPKH: _requesterPKH,\n      requestedFee: toBN(_requestedFee),\n      outpoint: _outpoint,\n      digest: _digest\n    };\n  }\n}\n","// JS implementation of merkle.py script from [summa-tx/bitcoin-spv] repository.\n//\n// [summa-tx/bitcoin-spv]: https://github.com/summa-tx/bitcoin-spv/\nimport Hash256 from 'bcrypto/lib/hash256.js'\nimport BcryptoMerkle from 'bcrypto/lib/merkle.js'\nconst { deriveRoot } = BcryptoMerkle\n\n/**\n * @typedef {Object} Proof\n * @property {string} tx - Raw transaction in hexadecimal format.\n * @property {string} merkleProof - Transaction merkle proof.\n * @property {string} txInBlockIndex - Transaction index in a block.\n * @property {string} chainHeaders - Chain of blocks headers.\n */\n\nexport class BitcoinSPV {\n  /**\n   * Initialize Bitcoin SPV with provided Electrum Client.\n   * @param {ElectrumClient} electrumClient\n   */\n  constructor(electrumClient) {\n    this.client = electrumClient\n  }\n\n  /**\n   * Get SPV transaction proof.\n   * @param {string} txHash Transaction hash.\n   * @param {number} confirmations Required number of confirmations for the transaction.\n   * @return {Proof} Transaction's SPV proof.\n   */\n  async getTransactionProof(txHash, confirmations) {\n    // GET TRANSACTION\n    const tx = await this.client.getTransaction(txHash)\n      .catch((err) => {\n        throw new Error(`failed to get transaction: [${err}]`)\n      })\n\n    if (tx.confirmations < confirmations) {\n      throw new Error(`transaction confirmations number [${tx.confirmations}] is not enough, required [${confirmations}]`)\n    }\n\n    const latestBlockHeight = await this.client.latestBlockHeight()\n      .catch((err) => {\n        throw new Error(`failed to get latest block height: [${err}]`)\n      })\n\n    const txBlockHeight = latestBlockHeight - tx.confirmations + 1\n\n    // GET HEADER CHAIN\n    const headersChain = await this.client.getHeadersChain(txBlockHeight, confirmations)\n      .catch((err) => {\n        throw new Error(`failed to get headers chain: [${err}]`)\n      })\n\n    // GET MERKLE PROOF\n    const merkleProof = await this.client.getMerkleProof(txHash, txBlockHeight)\n      .catch((err) => {\n        throw new Error(`failed to get merkle proof: [${err}]`)\n      })\n\n    return {\n      tx: tx.hex,\n      merkleProof: merkleProof.proof,\n      txInBlockIndex: merkleProof.position,\n      chainHeaders: headersChain,\n    }\n  }\n\n  /**\n   * Verifies merkle proof of transaction inclusion in the block. It expects proof\n   * as a concatenation of 32-byte values in a hexadecimal form. The proof should\n   * include the merkle tree branches, with transaction hash merkle tree root omitted.\n   * @param {string} proofHex hexadecimal representation of the proof\n   * @param {string} txHash Transaction hash.\n   * @param {number} index is transaction index in the block (1-indexed)\n   * @param {number} blockHeight Height of the block where transaction was confirmed.\n   * @return {boolean} true if verification passed, else false\n   */\n  async verifyMerkleProof(proofHex, txHash, index, blockHeight) {\n    const proof = Buffer.from(proofHex, 'hex')\n\n    // Retreive merkle tree root.\n    let actualRoot = await this.client.getMerkleRoot(blockHeight).catch((err) => {\n      throw new Error(`failed to get merkle root: [${err}]`)\n    })\n    actualRoot = Buffer.from(actualRoot, 'hex')\n\n    // Extract tree branches\n    const branches = []\n    for (let i = 0; i < (Math.floor(proof.length / 32)); i++) {\n      const branch = proof.slice(i * 32, (i + 1) * 32)\n      branches.push(branch)\n    }\n\n    // Derive expected root from branches and transaction.\n    const txHashBuffer = Buffer.from(txHash, 'hex').reverse()\n    const expectedRoot = deriveRoot(Hash256, txHashBuffer, branches, index)\n\n    // Validate if calculated root is equal to the one returned from client.\n    if (actualRoot.equals(expectedRoot)) {\n      return true\n    } else {\n      return false\n    }\n  }\n}\n","import BcoinPrimitives from \"bcoin/lib/primitives/index.js\";\nimport bufio from \"bufio\";\n\nconst { TX: bcoin_tx } = BcoinPrimitives;\n\nfunction parse(rawTx) {\n  const tx = bcoin_tx.fromRaw(rawTx, \"hex\");\n\n  return {\n    version: getTxVersion(tx),\n    txInVector: getTxInputVector(tx),\n    txOutVector: getTxOutputVector(tx),\n    locktime: getTxLocktime(tx)\n  };\n}\n\nfunction getTxVersion(tx) {\n  const buffer = bufio.write();\n  buffer.writeU32(tx.version);\n\n  return toHex(buffer);\n}\n\nfunction getTxInputVector(tx) {\n  return vectorToRaw(tx.inputs);\n}\n\nfunction getTxOutputVector(tx) {\n  return vectorToRaw(tx.outputs);\n}\n\nfunction getTxLocktime(tx) {\n  const buffer = bufio.write();\n  buffer.writeU32(tx.locktime);\n\n  return toHex(buffer);\n}\n\nfunction vectorToRaw(elements) {\n  const buffer = bufio.write();\n  buffer.writeVarint(elements.length);\n\n  for (const element of elements) {\n    element.toWriter(buffer);\n  }\n\n  return toHex(buffer);\n}\n\nfunction toHex(buffer) {\n  return buffer.render().toString(\"hex\");\n}\n\nexport const BitcoinTxParser = {\n  parse\n};\n","import ElectrumClient from 'electrum-client-js'\nimport sha256 from 'bcrypto/lib/sha256.js'\nconst { digest } = sha256\n\n/**\n * Configuration of electrum client.\n * @typedef Config\n * @type {Object}\n * @property {string} server ElectrumX server hostname.\n * @property {number} port ElectrumX server port.\n * @property {string} protocol ElectrumX server connection protocol\n * (`ssl`|`tls`|`ws`|`wss`).\n */\n\n/**\n * Client to interact with [ElectrumX](https://electrumx.readthedocs.io/en/stable/index.html)\n * server.\n * Uses methods exposed by the [Electrum Protocol](https://electrumx.readthedocs.io/en/stable/protocol.html)\n */\nexport default class Client {\n  /**\n   * Initializes Electrum Client instance with provided configuration.\n   * @param {Config} config Electrum client connection configuration.\n   */\n  constructor(config) {\n    this.electrumClient = new ElectrumClient(\n      config.server,\n      config.port,\n      config.protocol,\n      config.options\n    )\n  }\n\n  /**\n   * Establish connection with the server.\n   */\n  async connect() {\n    console.log('Connecting to electrum server...')\n\n    await this.electrumClient.connect('tbtc', '1.4.2')\n      .catch((err) => {\n        throw new Error(`failed to connect: [${err}]`)\n      })\n  }\n\n  /**\n  * Disconnect from the server.\n  */\n  async close() {\n    console.log('Closing connection to electrum server...')\n    this.electrumClient.close()\n  }\n\n  /**\n   * Get height of the latest mined block.\n   * @return {number} Height of the last mined block.\n   */\n  async latestBlockHeight() {\n    // Get header of the latest mined block.\n    const header = await this.electrumClient.blockchain_headers_subscribe()\n      .catch((err) => {\n        throw new Error(`failed to get block header: [${err}]`)\n      })\n    return header.height\n  }\n\n  /**\n   * Get details of the transaction.\n   * @param {string} txHash Hash of a transaction.\n   * @return {*} Transaction details.\n   */\n  async getTransaction(txHash) {\n    const tx = await this.electrumClient.blockchain_transaction_get(txHash, true)\n      .catch((err) => {\n        throw new Error(`failed to get transaction: [${err}]`)\n      })\n\n    return tx\n  }\n\n  /**\n  * Broadcast a transaction to the network.\n  * @param {string} rawTX The raw transaction as a hexadecimal string.\n  * @return {string} The transaction hash as a hexadecimal string.\n  */\n  async broadcastTransaction(rawTX) {\n    const txHash = await this.electrumClient.blockchain_transaction_broadcast(rawTX)\n      .catch((err) => {\n        throw new Error(`failed to broadcast transaction: [${err}]`)\n      })\n\n    return txHash\n  }\n\n  /**\n   * Get unspent outputs sent to a script.\n   * @param {string} script ScriptPubKey in a hexadecimal format.\n   * @return {*} List of unspent outputs. It includes transactions in the mempool.\n   */\n  async getUnspentToScript(script) {\n    const scriptHash = scriptToHash(script)\n\n    const listUnspent = await this.electrumClient.blockchain_scripthash_listunspent(scriptHash)\n      .catch((err) => {\n        throw new Error(JSON.stringify(err))\n      })\n\n    return listUnspent\n  }\n\n  /**\n   * Listens for transactions sent to a script until callback resolves to a\n   * 'truthy' value. It includes transactions in the mempool. It passes\n   * [status]([Electrum Protocol](https://electrumx.readthedocs.io/en/stable/protocol-basics.html#status))\n   * of the transaction to the callback.\n   * @param {string} script ScriptPubKey in a hexadecimal format.\n   * @param {function} callback Is an async callback function called when an existing\n   * transaction for the script is found or a new transaction is sent to the script.\n     * @return {any} Value resolved by the callback.\n   */\n  async onTransactionToScript(script, callback) {\n    const scriptHash = scriptToHash(script)\n\n    // Check if transaction for script already exists.\n    const initialStatus = await this.electrumClient.blockchain_scripthash_subscribe(scriptHash)\n      .catch((err) => {\n        throw new Error(`failed to subscribe: ${err}`)\n      })\n\n    // Invoke callback for the current status.\n    const result = await callback(initialStatus)\n    if (result) {\n      // TODO: We send request directly, because `electrumjs` library doesn't\n      // support `blockchain.scripthash.unsubscribe` method.\n      await this.electrumClient.blockchain_scripthash_unsubscribe(scriptHash)\n        .catch((err) => {\n          throw new Error(`failed to unsubscribe: ${err}`)\n        })\n\n      return result\n    }\n\n    // If callback have not resolved wait for new transaction notifications.\n    return new Promise(async (resolve) => {\n      try {\n        const eventName = 'blockchain.scripthash.subscribe'\n        const electrumClient = this.electrumClient\n\n        const listener = async function(msg) {\n          const receivedScriptHash = msg[0]\n          const status = msg[1]\n\n          console.log(\n            `Received notification for script hash: [${receivedScriptHash}] with status: [${status}]`\n          )\n\n          if (receivedScriptHash == scriptHash) {\n            const result = await callback(status)\n            if (result) {\n              await electrumClient.subscribe.off(eventName, listener)\n\n              // TODO: We send request directly, because `electrumjs` library doesn't\n              // support `blockchain.scripthash.unsubscribe` method.\n              await electrumClient.blockchain_scripthash_unsubscribe(scriptHash)\n                .catch((err) => {\n                  throw new Error(`failed to unsubscribe: ${err}`)\n                })\n\n              return resolve(result)\n            }\n          }\n        }\n\n        this.electrumClient.subscribe.on(eventName, listener)\n      } catch (err) {\n        throw new Error(`failed listening for notification: ${err}`)\n      }\n    })\n  }\n\n  /**\n   * Calls a callback for the current block and next mined blocks until the\n   * callback returns a truthy value.\n   * @param {function} callback Callback function called for the current block\n   * and when a new block is mined. It passes to the callback a value returned by\n   * [blockchain.headers.subscribe](https://electrumx.readthedocs.io/en/stable/protocol-methods.html#blockchain-headers-subscribe).\n   * @return {any} Value resolved by the callback.\n   */\n  async onNewBlock(callback) {\n    // Subscribe for new block notifications.\n    const blockHeader = await this.electrumClient.blockchain_headers_subscribe()\n      .catch((err) => {\n        throw new Error(`failed to subscribe: ${err}`)\n      })\n\n    // Invoke callback for the current block.\n    const result = await callback(blockHeader)\n    if (result) {\n      return result\n    }\n\n    // If callback have not resolved wait for new blocks notifications.\n    return new Promise(async (resolve) => {\n      try {\n        const eventName = 'blockchain.headers.subscribe'\n        const electrumClient = this.electrumClient\n\n        const listener = async function(messages) {\n          for (const msg of messages) {\n            const height = msg.height\n\n            console.log(\n              `Received notification of a new block at height: [${height}]`\n            )\n\n            // Invoke callback for the current block.\n            const result = await callback(msg)\n            if (result) {\n              await electrumClient.subscribe.off(eventName, listener)\n\n              return resolve(result)\n            }\n          }\n        }\n\n        this.electrumClient.subscribe.on(eventName, listener)\n\n        console.log(`Registered listener for ${eventName} event`)\n      } catch (err) {\n        throw new Error(`failed listening for notification: ${err}`)\n      }\n    })\n  }\n\n  /**\n   * Get merkle root hash for block.\n   * @param {number} blockHeight Block height.\n   * @return {string} Merkle root hash.\n   */\n  async getMerkleRoot(blockHeight) {\n    const header = await this.electrumClient.blockchain_block_header(blockHeight)\n      .catch((err) => {\n        throw new Error(`failed to get block header: [${err}]`)\n      })\n\n    return fromHex(header).slice(36, 68)\n  }\n\n  /**\n   * Get concatenated chunk of block headers built on a starting block.\n   * @param {number} blockHeight Starting block height.\n   * @param {number} confirmations Number of confirmations (subsequent blocks)\n   * built on the starting block.\n   * @return {string} Concatenation of block headers in a hexadecimal format.\n   */\n  async getHeadersChain(blockHeight, confirmations) {\n    const headersChain = await this.electrumClient.blockchain_block_headers(blockHeight, confirmations + 1)\n      .catch((err) => {\n        throw new Error(`failed to get block headers: [${err}]`)\n      })\n    return headersChain.hex\n  }\n\n  /**\n   * Get proof of transaction inclusion in the block. It produces proof as a\n   * concatenation of 32-byte values in a hexadecimal form. It converts the\n   * values to little endian form.\n   * @param {string} txHash Hash of a transaction.\n   * @param {number} blockHeight Height of the block where transaction was confirmed.\n   * @return {string} Transaction inclusion proof in hexadecimal form.\n   */\n  // TODO: We should move this function to BitcoinSPV.js file as it's strictly\n  // related to bitcoin-spv. It just gets merkle from electrum and reverses\n  // endianess.\n  async getMerkleProof(txHash, blockHeight) {\n    const merkle = await this.electrumClient.blockchain_transaction_getMerkle(txHash, blockHeight)\n      .catch((err) => {\n        throw new Error(`failed to get transaction merkle: [${err}]`)\n      })\n\n    let proof = Buffer.from('')\n\n    // Merkle tree\n    merkle.merkle.forEach(function(item) {\n      proof = Buffer.concat([proof, fromHex(item).reverse()])\n    })\n\n\n    return { proof: toHex(proof), position: merkle.pos }\n  }\n\n  /**\n   * Finds index of output in a transaction for a given address.\n   * @param {string} txHash Hash of a transaction.\n   * @param {string} address Bitcoin address for the output.\n   * @return {number} Index of output in the transaction (0-indexed).\n   */\n  async findOutputForAddress(txHash, address) {\n    const tx = await this.getTransaction(txHash)\n      .catch((err) => {\n        throw new Error(`failed to get transaction: [${err}]`)\n      })\n\n    const outputs = tx.vout\n\n    for (let index = 0; index < outputs.length; index++) {\n      for (const a of outputs[index].scriptPubKey.addresses) {\n        if (a == address) {\n          return (index)\n        }\n      }\n    }\n\n    throw new Error(`output for address ${address} not found`)\n  }\n}\n\nfunction fromHex(hex) {\n  return Buffer.from(hex, 'hex')\n}\n\nfunction toHex(bytes) {\n  return Buffer.from(bytes).toString('hex')\n}\n\n/**\n * Converts ScriptPubKey to a script hash specified by the [Electrum Protocol](https://electrumx.readthedocs.io/en/stable/protocol-basics.html#script-hashes).\n * @param {string} script ScriptPubKey in a hexadecimal format.\n * @return {string} Script hash.\n */\nfunction scriptToHash(script) {\n  const scriptHash = digest(fromHex(script)).reverse()\n  return toHex(scriptHash)\n}\n","module.exports = __webpack_public_path__ + \"static/media/dots.e5a1bfe3.svg\";","module.exports = __webpack_public_path__ + \"static/media/one.00f0b5f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/two.94e400be.svg\";","module.exports = __webpack_public_path__ + \"static/media/done.98d0e36d.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1869;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 2027;","import React, { useEffect, useState } from \"react\";\nimport QRCode from \"qrcode\";\n\nexport default ({ depositHandler }) => {\n  const [bitcoinAddress, setBitcoinAddress] = useState(\"\");\n  console.log(\"Deposit handler\", depositHandler)\n  useEffect(() => {\n    if (!bitcoinAddress && depositHandler && depositHandler.address) {\n      depositHandler.bitcoinAddress.then(setBitcoinAddress);\n    }\n  }, [bitcoinAddress, depositHandler]);\n\n  useEffect(() => {\n    if (bitcoinAddress) {\n      QRCode.toCanvas(document.getElementById(\"canvas\"), bitcoinAddress);\n    }\n  }, [bitcoinAddress]);\n  return <canvas id=\"canvas\"></canvas>;\n};\n","export const determineHelperText = (\n  sigsRequired,\n  submittedInitialDepositAmount,\n  pendingDepositAddress\n) => {\n  if (\n    (!submittedInitialDepositAmount && !pendingDepositAddress) ||\n    sigsRequired === 2\n  )\n    return \"Select deposit amount\";\n  if (sigsRequired === 1) return \"One more signature left to go!\";\n  if (sigsRequired === 0) return \"Deposit created\";\n};\n","import { useEffect, useState } from \"react\";\nimport Box from \"3box\";\nimport TBTC from \"../tbtc.js/TBTC.js\";\nimport BitcoinHelpers from \"../tbtc.js/BitcoinHelpers\";\n\nimport Fortmatic from \"fortmatic\";\nimport Web3 from \"web3\";\nconst tbtcTokenAddress = \"0x083f652051b9CdBf65735f98d83cc329725Aa957\";\nconst cbtcTokenAddress = \"0xb40d042a65dd413ae0fd85becf8d722e16bc46f1\"; //ropsten\nvar ctbtcABI = require(\"../ctbtcABI.json\");\nvar tbtcABI = require(\"../TBTCABI.json\");\nconsole.log(\"ABI1\", ctbtcABI);\nconsole.log(\"ABI2\", tbtcABI);\n\n// import HDWalletProvider from \"@truffle/hdwallet-provider\";\n// const mnemonic =\n//   \"egg dune news grocery detail frog kiwi hidden tuna noble speak over\";\n\n// const provider = new HDWalletProvider(\n//   mnemonic,\n//   \"https://ropsten.infura.io/v3/bf239bcb4eb2441db2ebaff8f9d80363\"\n// );\n\nlet fm = new Fortmatic(\"pk_test_001FD198F278ECC9\", \"ropsten\");\nconst provider = fm.getProvider();\nconst web3 = new Web3(provider);\n\nexport const use3Box = setStep => {\n  const [pendingDepositAddress, setPendingDepositAddress] = useState(\"\");\n  const [tbtcDepositSpace, setTbtcDepositSpace] = useState(null);\n  useEffect(() => {\n    const fetchInfoFrom3Box = async () => {\n      const [defaultAccount] = await web3.eth.getAccounts();\n      const box = await Box.create(provider);\n      const spaces = [\"tbtc-deposit\"];\n      await box.auth(spaces, { address: defaultAccount });\n      const tbtcDepositSpace = await box.openSpace(\"tbtc-deposit\");\n      await tbtcDepositSpace.syncDone;\n      const depositAddress = await tbtcDepositSpace.public.get(\"tbtc-deposit\");\n      setStep(0);\n      setPendingDepositAddress(depositAddress || \"\");\n      setTbtcDepositSpace(tbtcDepositSpace);\n    };\n    fetchInfoFrom3Box();\n  }, []);\n  return { pendingDepositAddress, tbtcDepositSpace };\n};\n\nexport const getAddressAndBalances = () => {\n  const [currentAddress, setCurrentAddress] = useState(\"\");\n  const [balances, setBalances] = useState({ CTBTC: 0, TBTC: 0 });\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const cTBTCContract = new web3.eth.Contract(ctbtcABI, cbtcTokenAddress);\n      const TBTCTokenContract = new web3.eth.Contract(\n        tbtcABI,\n        tbtcTokenAddress\n      );\n      const [currentAccount] = await web3.eth.getAccounts();\n      if (currentAccount) {\n        setCurrentAddress(currentAccount);\n        let CTBTC = await cTBTCContract.methods\n          .balanceOfUnderlying(currentAccount)\n          .call();\n        let TBTC = await TBTCTokenContract.methods\n          .balanceOf(currentAccount)\n          .call();\n        setBalances({ CTBTC, TBTC });\n        console.log(TBTC, CTBTC, currentAccount);\n      } else {\n        console.error(\"Could not get current account\");\n      }\n    };\n    fetchBalances();\n  }, [web3]);\n  return { currentAddress, balances };\n};\n\nexport const getLotsAndTbtcHandler = (setError, setLots, setTbtcHandler) => {\n  const getLots = async () => {\n    const web3 = new Web3(provider);\n    const [defaultAccount] = await web3.eth.getAccounts();\n    web3.eth.defaultAccount = defaultAccount;\n\n    try {\n      await web3.ethereum.enable();\n    } catch (err) {\n      setError(err.message);\n    }\n    const tbtc = await TBTC.withConfig({\n      web3,\n      bitcoinNetwork: \"testnet\",\n      electrum: {\n        testnet: {\n          server: \"electrumx-server.test.tbtc.network\",\n          port: 50002,\n          protocol: \"ssl\"\n        },\n        testnetPublic: {\n          server: \"testnet1.bauerj.eu\",\n          port: 50002,\n          protocol: \"ssl\"\n        },\n        testnetWS: {\n          server: \"electrumx-server.test.tbtc.network\",\n          port: 50003,\n          protocol: \"ws\"\n        }\n      }\n    });\n    const lotSizes = await tbtc.Deposit.availableSatoshiLotSizes();\n    setLots(lotSizes);\n    setTbtcHandler(tbtc);\n  };\n  getLots();\n};\n\nexport const registerBTCDepositListeners = (\n  depositHandler,\n  setSubmitting,\n  submitting,\n  setStep,\n  setLoading,\n  setTxInFlight\n) => {\n  const registerBtcTxListener = () => {\n    console.log(\"BITCOIN TX LISTENER IS ABOUT TO GET REGISTERED\");\n    setSubmitting(true);\n    depositHandler.onActive(async () => {\n      const tbtc = await depositHandler.mintTBTC();\n      console.log(tbtc, \"SUCCESS!\");\n    });\n    depositHandler.bitcoinAddress.then(address =>\n      onBTCAddressResolution(\n        address,\n        depositHandler,\n        setStep,\n        setLoading,\n        setTxInFlight\n      )\n    );\n  };\n  if (depositHandler && !submitting) registerBtcTxListener();\n};\n\nconst onBTCAddressResolution = async (\n  address,\n  depositHandler,\n  setStep,\n  setLoading,\n  setTxInFlight\n) => {\n  console.log(\"BITCOIN ADDRESS JUST RESOLVED \", address);\n  setStep(1);\n  setLoading(false);\n  const expectedValue = (await depositHandler.getSatoshiLotSize()).toNumber();\n  console.log(`Monitoring Bitcoin for transaction to address ${address}...`);\n  const tx = await BitcoinHelpers.Transaction.findOrWaitFor(\n    address,\n    expectedValue\n  );\n  console.log(\"found tx\", tx);\n  setTxInFlight(true);\n\n  const requiredConfirmations = (\n    await depositHandler.factory.constantsContract.getTxProofDifficultyFactor()\n  ).toNumber();\n  console.log(\n    `Waiting for ${requiredConfirmations} confirmations for ` +\n      `Bitcoin transaction ${tx.transactionID}...`\n  );\n  await BitcoinHelpers.Transaction.waitForConfirmations(\n    tx,\n    requiredConfirmations\n  );\n\n  console.log(\n    `Submitting funding proof to deposit ${depositHandler.address} for ` +\n      `Bitcoin transaction ${tx.transactionID}...`\n  );\n  const proofArgs = await depositHandler.constructFundingProof(\n    tx,\n    requiredConfirmations\n  );\n  console.log(\"just constructed proof args\", proofArgs);\n  proofArgs.push({\n    from: depositHandler.factory.config.web3.eth.defaultAccount\n  });\n  depositHandler.contract.provideBTCFundingProof.apply(\n    depositHandler.contract,\n    proofArgs\n  );\n  console.log(\"submitted the proof\");\n};\n\nexport const usePendingDeposit = (\n  tbtcHandler,\n  depositAddress,\n  submitting,\n  setSubmitting,\n  setDepositHandler,\n  setStep,\n  setLoading,\n  setStep1SigsRequired,\n  setTxInFlight\n) => {\n  useEffect(() => {\n    const listenForPendingDeposits = async () => {\n      setSubmitting(true);\n      const depositHandler = await tbtcHandler.Deposit.withAddress(\n        depositAddress,\n        setStep1SigsRequired\n      );\n      setDepositHandler(depositHandler);\n      depositHandler.onActive(async () => {\n        const tbtc = await depositHandler.mintTBTC();\n        console.log(tbtc, \"SUCCESS!\");\n      });\n      depositHandler.bitcoinAddress.then(address =>\n        onBTCAddressResolution(\n          address,\n          depositHandler,\n          setStep,\n          setLoading,\n          setTxInFlight\n        )\n      );\n    };\n    if (tbtcHandler && depositAddress && !submitting) {\n      console.log(\"listening for a pending deposit\");\n      setStep1SigsRequired(1);\n      listenForPendingDeposits();\n    }\n  }, [\n    tbtcHandler,\n    depositAddress,\n    submitting,\n    setSubmitting,\n    setDepositHandler\n  ]);\n};\n\nexport const useLotsAndTbtcHandler = (setError, setLots, setTbtcHandler) =>\n  useEffect(() => getLotsAndTbtcHandler(setError, setLots, setTbtcHandler), []);\nexport const useBTCDepositListeners = (\n  depositHandler,\n  setSubmitting,\n  submitting,\n  setStep,\n  setLoading,\n  setTxInFlight\n) =>\n  useEffect(\n    () =>\n      registerBTCDepositListeners(\n        depositHandler,\n        setSubmitting,\n        submitting,\n        setStep,\n        setLoading,\n        setTxInFlight\n      ),\n    [depositHandler, submitting, setSubmitting]\n  );\n","import React, { Component, useState, useEffect } from \"react\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport TBTC from \"./tbtc.js/TBTC.js\";\nimport BitcoinHelpers from \"./tbtc.js/BitcoinHelpers\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Dots from \"./images/dots.svg\";\nimport One from \"./images/one.svg\";\nimport Two from \"./images/two.svg\";\nimport Done from \"./images/done.svg\";\nimport {\n  Grommet,\n  Button,\n  Menu,\n  Box,\n  Anchor,\n  Heading,\n  Header,\n  RadioButton,\n  TextInput\n} from \"grommet\";\n// import { grommet } from \"grommet/themes\";\nimport QR from \"./components/QRCode\";\nimport { determineHelperText } from \"./utils\";\n\n// import ApolloClient, { gql, InMemoryCache } from 'apollo-boost'\n// import { ApolloProvider, Query } from 'react-apollo'\n\nimport {\n  getTokenReserves,\n  getMarketDetails,\n  getTradeDetails,\n  TRADE_EXACT,\n  tradeExactEthForTokensWithData,\n  getExecutionDetails,\n  FACTORY_ABI\n} from \"@uniswap/sdk\";\n\nimport { BigNumber } from \"bignumber.js\";\n// import {\n//   // Grid,\n//   // LinearProgress,\n//   // Dialog,\n//   // DialogActions,\n//   // DialogContent,\n//   // DialogContentText,\n//   // DialogTitle,\n//   Button\n// } from \"@material-ui/core\";\nimport \"./App.css\";\n// import Header from './components/Header'\n// import Error from './components/Error'\n// import Gravatars from './components/Gravatars'\n// import Filter from './components/Filter'\nimport Fortmatic from \"fortmatic\";\nimport Web3 from \"web3\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport styled from \"styled-components\";\nimport { AwesomeButton as StyleButton } from \"react-awesome-button\";\nimport \"react-awesome-button/dist/styles.css\";\n\nimport {\n  useLotsAndTbtcHandler,\n  useBTCDepositListeners,\n  usePendingDeposit,\n  use3Box,\n  getAddressAndBalances\n} from \"./hooks\";\n\nconst AwesomeButton = styled(StyleButton)`\n  --button-default-height: 48px;\n  --button-default-font-size: 14px;\n  --button-default-border-radius: 6px;\n  --button-horizontal-padding: 20px;\n  --button-raise-level: 5px;\n  --button-hover-pressure: 2;\n  --transform-speed: 0.185s;\n  --button-primary-color: #3d66ff;\n  --button-primary-color-dark: #2a3143;\n  --button-primary-color-light: #d4d9e4;\n  --button-primary-color-hover: #213fad;\n  --button-primary-border: none;\n  --button-secondary-color: #fffc6c;\n  --button-secondary-color-dark: #b9b500;\n  --button-secondary-color-light: #6c6a00;\n  --button-secondary-color-hover: #fffb3e;\n  --button-secondary-border: none;\n  --button-anchor-color: #f3c8ad;\n  --button-anchor-color-dark: #734922;\n  --button-anchor-color-light: #4c3016;\n  --button-anchor-color-hover: #f1bfa0;\n  --button-anchor-border: 1px solid #8c633c;\n`;\n\nconst web3 = new Web3(window.ethereum);\nconst myTheme = {\n  radioButton: {\n    check: {\n      color: \"#1A5AFE\"\n    }\n  },\n  global: {\n    font: {\n      family: \"Rubik, sans-serif !important\"\n    }\n  }\n};\n\nconst StyledDots = styled.img`\n  left: 0;\n  position: fixed;\n  top: 104px;\n`;\n\nconst StyledNumber = styled.img`\n  /* margin-top: -11px; */\n  padding-right: 20px;\n`;\n\nconst HeaderText = styled.div`\n  font-size: 32px;\n  font-weight: 500;\n  display: inline;\n`;\n\nconst StyledHeading = styled(Heading)`\n  /* padding-top: 7px;\n  padding-bottom: 5px; */\n  /* padding-top: 20px; */\n  background-color: white;\n  margin: 0 auto;\n`;\n\nconst UnderHeader = styled.div`\n  margin-top: 10px;\n  padding-left: 68px;\n`;\n// const mnemonic =\n//   \"egg dune news grocery detail frog kiwi hidden tuna noble speak over\";\n\n// const provider = new HDWalletProvider(\n//   mnemonic,\n//   \"https://ropsten.infura.io/v3/bf239bcb4eb2441db2ebaff8f9d80363\"\n// );\n\n// let fm = new Fortmatic(\"pk_test_001FD198F278ECC9\", \"ropsten\");\n\n// if (!process.env.REACT_APP_GRAPHQL_ENDPOINT) {\n//   throw new Error('REACT_APP_GRAPHQL_ENDPOINT environment variable not defined')\n// }\n\n// const client = new ApolloClient({\n//   uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\n//   cache: new InMemoryCache(),\n// })\n\n// const GRAVATARS_QUERY = gql`\n//   query gravatars($where: Gravatar_filter!, $orderBy: Gravatar_orderBy!) {\n//     gravatars(first: 100, where: $where, orderBy: $orderBy, orderDirection: asc) {\n//       id\n//       owner\n//       displayName\n//       imageUrl\n//     }\n//   }\n// `\nconst exchangeAddress = \"0x242E084657F5cdcF745C03684aAeC6E9b0bB85C5\"; //ROPSTEN TBTC EXCHANGE\nconst exchangeABI = require(\"./exchangeABI.json\");\nconst tbtcTokenAddress = \"0x083f652051b9CdBf65735f98d83cc329725Aa957\";\nconst cbtcTokenAddress = \"0xb40d042a65dd413ae0fd85becf8d722e16bc46f1\"; //ropsten\nvar ctbtcABI = require(\"./ctbtcABI.json\");\n\nconst approveCtbcContract = async currentAddress => {\n  const tbtcTokenContract = new web3.eth.Contract(ctbtcABI, tbtcTokenAddress);\n  let receipt;\n  try {\n    receipt = await tbtcTokenContract.methods\n      .approve(cbtcTokenAddress, web3.utils.toBN(10e18))\n      .send({ from: currentAddress });\n  } catch (err) {\n    console.error(\"Error approving contract\", err);\n  }\n};\nconst convertTbtcToCbtc = async (currentAddress, mintAmount) => {\n  //grab ABI from ctbtc.json\n  const cTBTCContract = new web3.eth.Contract(ctbtcABI, cbtcTokenAddress);\n  window.ctoken = cTBTCContract;\n  const numCtbtcToMint = web3.utils.toWei(\".1\", \"ether\"); //mint amount should be first arg\n  let receipt;\n  try {\n    receipt = await cTBTCContract.methods.mint(numCtbtcToMint).send({\n      from: currentAddress\n    });\n    console.log(\"receipt\", receipt);\n  } catch (err) {\n    console.error(\"Err minting\", err);\n  }\n};\n\n// async function getMarkets() {\n//   const _purchaseAmount = new BigNumber(\"3\");\n//   // const _purchaseAmount: BigNumber = new BigNumber('2.5')\n//   const _decimals = 18;\n//   const _tradeAmount = _purchaseAmount.multipliedBy(10 ** _decimals);\n\n//   let reserves = await getTokenReserves(\n//     \"0x083f652051b9CdBf65735f98d83cc329725Aa957\",\n//     3\n//   );\n\n//   let markets = await getMarketDetails(undefined, reserves);\n//   let trades = await getTradeDetails(\n//     TRADE_EXACT.input,\n//     _purchaseAmount,\n//     markets\n//   );\n//   let trade = await tradeExactEthForTokensWithData(reserves, _tradeAmount);\n//   let formattedTrade = await getExecutionDetails(trade);\n//   window.trade = formattedTrade;\n//   console.log(\"TRADE\", formattedTrade);\n//   console.log(\n//     \"Swap method arguments\",\n//     formattedTrade.methodArguments[0],\n//     formattedTrade.methodArguments[1]\n//   );\n//   const [currentAccount] = await web3.eth.getAccounts();\n\nconst MobileCol = styled(Col)`\n  @media screen and (max-width: 992px) {\n    display: none;\n  }\n}\n`;\n\nconst toBtcSize = largeNum => largeNum / 100000000;\n\nconst StepComponent = ({ image, loading, headerText, stepDone, style }) => {\n  console.log(image, \"image\");\n  return (\n    <div style={{ display: \"flex\", marginRight: \"10px\", ...style }}>\n      <div style={{ display: \"inline\" }}>\n        <StyledNumber src={!stepDone ? image : Done} alt=\"first step\" />\n        {loading && (\n          <CircularProgress\n            size=\"48px\"\n            style={{\n              marginLeft: \"-68px\",\n              marginTop: \"-11px\",\n              marginRight: \"10px\"\n            }}\n          />\n        )}\n      </div>\n      <div style={{ marginTop: \"11px\", display: \"inline\" }}>\n        <HeaderText>{headerText}</HeaderText>\n      </div>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [step, setStep] = useState(-1);\n  const [loading, setLoading] = useState(false);\n  const [step1SigsRequired, setStep1SigsRequired] = useState(2);\n  const [\n    submittedInitialDepositAmount,\n    setSubmittedInitialDepositAmount\n  ] = useState(false);\n  const [txInFlight, setTxInFlight] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [lots, setLots] = useState([]);\n  const [enabled, setEnabled] = useState([false]);\n  const [tbtcHandler, setTbtcHandler] = useState(null);\n  const [depositHandler, setDepositHandler] = useState(null);\n  const [submitting, setSubmitting] = useState(false);\n  const [depositSatoshiAmount, setDepositSatoshiAmount] = useState(null);\n  const [mintAmount, setMintAmount] = useState(\"\");\n  const { currentAddress, balances } = getAddressAndBalances();\n  const { pendingDepositAddress, tbtcDepositSpace } = use3Box(setStep);\n  useLotsAndTbtcHandler(setError, setLots, setTbtcHandler);\n  useBTCDepositListeners(\n    depositHandler,\n    setSubmitting,\n    submitting,\n    setStep,\n    setLoading,\n    setTxInFlight\n  );\n  usePendingDeposit(\n    tbtcHandler,\n    pendingDepositAddress,\n    submitting,\n    setSubmitting,\n    setDepositHandler,\n    setStep,\n    setLoading,\n    setStep1SigsRequired,\n    setTxInFlight\n  );\n\n  return (\n    <Grommet theme={myTheme}>\n      <Header\n        pad=\"small\"\n        style={{ textAlign: \"center\", borderBottom: \"1px solid #DFE0E5\" }}\n      >\n        <StyledHeading size=\"small\" color=\"#1A5AFE\">\n          Convert BTC to TBTC\n        </StyledHeading>\n      </Header>\n      <button\n        onClick={async () => {\n          await tbtcDepositSpace.public.remove(\"tbtc-deposit\");\n        }}\n      >\n        Erase 3Box\n      </button>\n      <Container style={{ paddingTop: \"40px\" }}>\n        <Row>\n          <MobileCol md={2} sm={0}>\n            <StyledDots src={Dots} alt=\"dots for fun\" />\n          </MobileCol>\n          <Col md={10} sm={12}>\n            <StepComponent\n              image={One}\n              stepDone={step > 0}\n              headerText={determineHelperText(\n                step1SigsRequired,\n                submittedInitialDepositAmount,\n                pendingDepositAddress\n              )}\n              loading={step === 0 && loading}\n            />\n            {step1SigsRequired > 1 && (\n              <UnderHeader>\n                {lots && lots.length > 0 ? (\n                  <>\n                    {lots.map((lot, i) => {\n                      return (\n                        <RadioButton\n                          key={i}\n                          checked={depositSatoshiAmount === lot}\n                          onChange={() => {\n                            setDepositSatoshiAmount(lot);\n                          }}\n                          label={`${toBtcSize(lot)} BTC`}\n                          name={`${toBtcSize(lot)} BTC`}\n                        />\n                      );\n                    })}\n                  </>\n                ) : (\n                  <div>\n                    <CircularProgress />\n                  </div>\n                )}\n                {depositSatoshiAmount && (\n                  <>\n                    <div style={{ paddingTop: \"20px\" }}>\n                      Once you click “create deposit”, you’ll be prompted twice\n                      to sign messages.\n                    </div>\n                  </>\n                )}\n                <AwesomeButton\n                  button-default-border-radius=\"6px\"\n                  style={{\n                    marginTop: \"14px\"\n                    // padding: \"20px\"\n                  }}\n                  disabled={\n                    !depositSatoshiAmount ||\n                    depositSatoshiAmount.lte(0) ||\n                    step !== 0\n                  }\n                  onPress={async () => {\n                    setLoading(true);\n                    setSubmittedInitialDepositAmount(true);\n                    const deposit = await tbtcHandler.Deposit.withSatoshiLotSize(\n                      depositSatoshiAmount,\n                      setStep1SigsRequired\n                    );\n                    console.log(\"got deposit\");\n                    tbtcDepositSpace.public.set(\n                      \"tbtc-deposit\",\n                      deposit.address\n                    );\n                    console.log(\"set in 3box space\");\n                    setDepositHandler(deposit);\n                  }}\n                >\n                  {`Create ${\n                    depositSatoshiAmount ? toBtcSize(depositSatoshiAmount) : \"\"\n                  } BTC Deposit`}\n                </AwesomeButton>\n              </UnderHeader>\n            )}\n            <StepComponent\n              style={{ marginTop: \"55px \" }}\n              image={Two}\n              stepDone={step > 1}\n              headerText=\"Send BTC\"\n              loading={false}\n            />\n            {!txInFlight && (\n              <UnderHeader>\n                <QR\n                  shouldDisplay={depositHandler && depositHandler.address}\n                  depositHandler={depositHandler}\n                />\n              </UnderHeader>\n            )}\n            <div>\n              <AwesomeButton\n                onPress={approveCtbcContract(currentAddress)}\n                style={{\n                  marginTop: \"14px\"\n                }}\n              >\n                Approve\n              </AwesomeButton>\n              <h1> {`Current Address: ${currentAddress}`}</h1>\n              <h1> {`TBTC Balance: ${balances.TBTC}`}</h1>\n              <h1> {`CTBTC Balance: ${balances.CTBTC}`}</h1>\n            </div>\n            <TextInput\n              label=\"Mint Compound BTC\"\n              value={mintAmount}\n              onChange={event => setMintAmount(event.target.value)}\n            />\n            <AwesomeButton\n              onPress={convertTbtcToCbtc(currentAddress, mintAmount)}\n            >\n              Mint cTBtc\n            </AwesomeButton>\n          </Col>\n        </Row>\n      </Container>\n    </Grommet>\n  );\n};\n\n// class App extends Component {\n//   constructor(props) {\n//     super(props)\n//     this.state = {\n//       lots: []\n//     }\n//   }\n\n//   // toggleHelpDialog = () => {\n//   //   this.setState(state => ({ ...state, showHelpDialog: !state.showHelpDialog }))\n//   // }\n\n//   // gotoQuickStartGuide = () => {\n//   //   window.location.href = 'https://thegraph.com/docs/quick-start'\n//   // }\n\n//   render() {\n//     // const { withImage, withName, orderBy, showHelpDialog } = this.state\n\n//     return (\n//       // <ApolloProvider client={client}>\n//       <div>\n//         <Button onClick={() => sendWeb3Transaction()}>Test</Button>\n//         <div className=\"App\">\n//           BCTCBTtcTBTC\n//           {/* <Grid container direction=\"column\">\n//             <Header onHelp={this.toggleHelpDialog} />\n//             <Filter\n//               orderBy={orderBy}\n//               withImage={withImage}\n//               withName={withName}\n//               onOrderBy={field => this.setState(state => ({ ...state, orderBy: field }))}\n//               onToggleWithImage={() =>\n//                 this.setState(state => ({ ...state, withImage: !state.withImage }))\n//               }\n//               onToggleWithName={() =>\n//                 this.setState(state => ({ ...state, withName: !state.withName }))\n//               }\n//             />\n//             <Grid item>\n//               <Grid container>\n//                 <Query\n//                   query={GRAVATARS_QUERY}\n//                   variables={{\n//                     where: {\n//                       ...(withImage ? { imageUrl_starts_with: 'http' } : {}),\n//                       ...(withName ? { displayName_not: '' } : {}),\n//                     },\n//                     orderBy: orderBy,\n//                   }}\n//                 >\n//                   {({ data, error, loading }) => {\n//                     return loading ? (\n//                       <LinearProgress variant=\"query\" style={{ width: '100%' }} />\n//                     ) : error ? (\n//                       <Error error={error} />\n//                     ) : (\n//                       <Gravatars gravatars={data.gravatars} />\n//                     )\n//                   }}\n//                 </Query>\n//               </Grid>\n//             </Grid>\n//           </Grid>\n//           <Dialog\n//             fullScreen={false}\n//             open={showHelpDialog}\n//             onClose={this.toggleHelpDialog}\n//             aria-labelledby=\"help-dialog\"\n//           >\n//             <DialogTitle id=\"help-dialog\">{'Show Quick Guide?'}</DialogTitle>\n//             <DialogContent>\n//               <DialogContentText>\n//                 We have prepared a quick guide for you to get started with The Graph at\n//                 this hackathon. Shall we take you there now?\n//               </DialogContentText>\n//             </DialogContent>\n//             <DialogActions>\n//               <Button onClick={this.toggleHelpDialog} color=\"primary\">\n//                 Nah, I'm good\n//               </Button>\n//               <Button onClick={this.gotoQuickStartGuide} color=\"primary\" autoFocus>\n//                 Yes, pease\n//               </Button>\n//             </DialogActions>\n//           </Dialog> */}\n//         </div>\n//         </div>\n//       // </ApolloProvider>\n//     )\n//   }\n// }\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","import { DepositFactory } from \"./Deposit.js\";\n\nconst BitcoinNetwork = {\n    TESTNET: \"testnet\",\n    MAINNET: \"mainnet\"\n}\n\n/*\nexport type TBTCConfig = {\n    bitcoinNetwork: BitcoinNetwork,\n    web3: Web3,\n}\n*/\n\nconst defaultConfig/*: TBTCConfig */ = {\n    bitcoinNetwork: BitcoinNetwork.TESTNET,\n    web3: global.Web3,\n}\n\nfunction isMainnet(web3/*: Web3*/) {\n    return web3.currentProvider['chainId'] == 0x1\n}\nfunction isTestnet(web3/*: Web3*/) {\n    return ! isMainnet(web3)\n}\n\nclass TBTC {\n    // config/*: TBTCConfig*/;\n    // depositFactory/*: DepositFactory*/;\n\n    static async withConfig(config = defaultConfig/*: TBTCConfig*/, networkMatchCheck = true) {\n        const depositFactory = await DepositFactory.withConfig(config)\n\n        return new TBTC(depositFactory, config, networkMatchCheck)\n    }\n\n    constructor(depositFactory/*: DepositFactory*/, config/*: TBTCConfig*/ = defaultConfig, networkMatchCheck = true) {\n        if (networkMatchCheck &&\n            isMainnet(config.web3) && config.bitcoinNetwork == BitcoinNetwork.TESTNET ||\n            isTestnet(config.web3) && config.bitcoinNetwork == BitcoinNetwork.MAINNET) {\n                throw new Error(\n                    `Ethereum network ${config.web3.currentProvider.chainId} ` +\n                    `and Bitcoin network ${config.bitcoinNetwork} are not both ` +\n                    `on testnet or both on  mainnet. Quitting while we're ` +\n                    `ahead. Developers can also pass false as the ` +\n                    `networkMatchCheck parameter to suppress this error.`\n                )\n        }\n\n        this.depositFactory = depositFactory\n        this.config = config\n    }\n\n    get Deposit()/*: DepositFactory*/ {\n        return this.depositFactory\n    }\n}\n\nexport default {\n    withConfig: async (config/*: TBTCConfig*/, networkMatchCheck = true) => {\n        return await TBTC.withConfig(config, networkMatchCheck)\n    }\n};\n","import EventEmitter from 'events'\n\nimport BitcoinHelpers from \"./BitcoinHelpers.js\"\n\nimport EthereumHelpers from \"./EthereumHelpers.js\"\n\n/**\n * Details of a given redemption at a given point in time.\n * @typedef RedemptionDetails\n * @type {Object}\n * @property {BN} utxoSize The size of the UTXO size in the redemption.\n * @property {Buffer} requesterPKH The raw requester publicKeyHash bytes.\n * @property {BN} requestedFee The fee for the redemption transaction.\n * @property {Buffer} outpoint The raw outpoint bytes.\n * @property {Buffer} digest The raw digest bytes.\n */\n\n/**\n * Details of a given unsigned transaction\n * @typedef UnsignedTransactionDetails\n * @type {Object}\n * @property {string} hex The raw transaction hex string.\n * @property {digest} digest The transaction's digest.\n */\n\n/**\n * The Redemption class encapsulates the operations that finalize an already-\n * initiated redemption.\n *\n * Typically, you can call `autoSubmit()` and then register an `onWithdrawn`\n * handler to be notified when the Bitcoin transaction completing redemption has\n * been signed, submitted, and proven to the deposit contract.\n *\n * If you prefer to manage the Bitcoin side of the lifecycle separately, you can\n * register to be notified when a Bitcoin transaction is ready for submission\n * using `onBitcoinTransactionSigned`, and submit a redemption proof to once\n * that transaction is sufficiently confirmed using `proveWithdrawal`.\n *\n * `proveWithdrawal` will trigger any `onWithdrawn` handlers that have been\n * registered.\n */\nexport default class Redemption {\n    // deposit/*: Deposit*/\n\n    // redemptionDetails/*: Promise<RedemptionDetails>*/\n    // unsignedTransaction/*: Promise<UnsignedTransactionDetails>*/\n    // signedTransaction/*: Promise<SignedTransactionDetails>*/\n\n    // withdrawnEmitter/*: EventEmitter*/\n\n    constructor(deposit/*: Deposit*/, redemptionDetails/*: RedemptionDetails?*/) {\n        this.deposit = deposit\n        this.withdrawnEmitter = new EventEmitter()\n\n        this.redemptionDetails = this.getLatestRedemptionDetails(redemptionDetails)\n\n        this.unsignedTransactionDetails = this.redemptionDetails.then((details) => {\n            const outputValue = details.utxoSize.sub(details.requestedFee)\n            const unsignedTransaction =\n                BitcoinHelpers.Transaction.constructOneInputOneOutputWitnessTransaction(\n                    details.outpoint.replace('0x', ''),\n                    // We set sequence to `0` to be able to replace by fee. It reflects\n                    // bitcoin-spv:\n                    // https://github.com/summa-tx/bitcoin-spv/blob/2a9d594d9b14080bdbff2a899c16ffbf40d62eef/solidity/contracts/CheckBitcoinSigs.sol#L154\n                    0,\n                    outputValue.toNumber(),\n                    details.requesterPKH.replace('0x', ''),\n                )\n\n            return {\n                hex: unsignedTransaction,\n                digest: details.digest,\n            }\n        })\n\n        this.signedTransaction = this.unsignedTransactionDetails.then(async (unsignedTransactionDetails) => {\n            console.debug(\n                `Looking up latest redemption details for deposit ` +\n                `${this.deposit.address}...`\n            )\n            const redemptionDigest = (await this.redemptionDetails).digest\n\n            console.debug(\n                `Finding or waiting for transaction signature for deposit ` +\n                `${this.deposit.address}...`\n            )\n            const signatureEvent = await EthereumHelpers.getEvent(\n                this.deposit.keepContract,\n                'SignatureSubmitted',\n                { digest: redemptionDigest },\n            )\n            const { r, s } = signatureEvent.args\n            const publicKeyPoint = await this.deposit.publicKeyPoint\n\n            const signedTransaction = BitcoinHelpers.Transaction.addWitnessSignature(\n                unsignedTransactionDetails.hex,\n                0,\n                r.replace('0x', ''),\n                s.replace('0x', ''),\n                BitcoinHelpers.publicKeyPointToPublicKeyString(\n                    publicKeyPoint.x,\n                    publicKeyPoint.y,\n                ),\n            )\n\n            return signedTransaction\n        })\n    }\n\n    // autoSubmitting/*: boolean*/\n    autoSubmit() {\n        // Only enable auto-submitting once.\n        if (this.autoSubmitting) {\n            return\n        }\n        this.autoSubmitting = true\n\n        this.signedTransaction.then(async (signedTransaction) => {\n            console.debug(\n                `Looking for existing signed redemption transaction on Bitcoin ` +\n                `chain for deposit ${this.deposit.address}...`\n            )\n\n            const { utxoSize, requestedFee,  requesterPKH } = await this.redemptionDetails\n            const expectedValue = utxoSize.sub(requestedFee).toNumber()\n            const requesterAddress = BitcoinHelpers.Address.pubKeyHashToBech32(\n                requesterPKH.replace('0x', ''),\n                this.deposit.factory.config.bitcoinNetwork,\n            )\n            let transaction = await BitcoinHelpers.Transaction.find(\n                requesterAddress,\n                expectedValue,\n            )\n\n            if (! transaction) {\n                console.debug(\n                    `Broadcasting signed redemption transaction to Bitcoin chain ` +\n                    `for deposit ${this.deposit.address}...`\n                )\n                transaction = await BitcoinHelpers.Transaction.broadcast(\n                    signedTransaction,\n                )\n            }\n\n            const requiredConfirmations = (await this.deposit.factory.constantsContract.getTxProofDifficultyFactor()).toNumber()\n\n            console.debug(\n                `Waiting for ${requiredConfirmations} confirmations for ` +\n                `Bitcoin transaction ${transaction.transactionID}...`\n            )\n            await BitcoinHelpers.Transaction.waitForConfirmations(\n                transaction,\n                requiredConfirmations,\n            )\n\n            console.debug(\n                `Transaction is sufficiently confirmed; submitting redemption ` +\n                `proof to deposit ${this.deposit.address}...`\n            )\n            this.proveWithdrawal(transaction.transactionID, requiredConfirmations)\n        })\n        // TODO bumpFee if needed\n    }\n\n    /**\n     * Proves the withdrawal of the BTC in this deposit via the Bitcoin\n     * transaction with id `transactionID`.\n     *\n     * @param {string} transactionID A hexadecimal transaction id hash for the\n     *        transaction that completes the withdrawal of this deposit's BTC.\n     * @param {number} confirmations The number of confirmations required for\n     *        the proof; if this is not provided, looks up the required\n     *        confirmations via the deposit.\n     */\n    async proveWithdrawal(transactionID, confirmations) {\n        if (! confirmations) { // 0 still triggers a lookup\n            confirmations = (await this.deposit.factory.constantsContract.getTxProofDifficultyFactor()).toNumber()\n        }\n\n        const provableTransaction = {\n            transactionID: transactionID,\n            // For filtering, see provideRedemptionProof call below.\n            outputPosition: 'output position',\n        }\n        const proofArgs = await this.deposit.constructFundingProof(\n            provableTransaction,\n            confirmations,\n        )\n\n        proofArgs.push({ from: this.deposit.factory.config.web3.eth.defaultAccount })\n        await this.deposit.contract.provideRedemptionProof.apply(\n            this.deposit.contract,\n            // Redemption proof does not take the output position as a\n            // parameter, as all redemption transactions are one-input-one-output\n            // However, constructFundingProof includes it for deposit funding\n            // proofs. Here, we filter it out to produce the right set of\n            // parameters.\n            proofArgs.filter((_) => _ != 'output position'),\n        )\n\n        this.withdrawnEmitter.emit('withdrawn', transactionID)\n    }\n\n    onBitcoinTransactionSigned(transactionHandler/*: (transaction)=>void*/) {\n        this.signedTransaction.then(transactionHandler)\n    }\n\n    onWithdrawn(withdrawalHandler/*: (txHash)=>void*/) { // bitcoin txHash\n        this.withdrawnEmitter.on('withdrawn', withdrawalHandler)\n    }\n\n    /**\n     * Fetches the latest redemption details from the chain. These can change\n     * after fee bumps.\n     */\n    async getLatestRedemptionDetails(existingRedemptionDetails/*: RedemptionDetails?*/) {\n        if (existingRedemptionDetails) {\n            return existingRedemptionDetails\n        }\n\n        return await this.deposit.getLatestRedemptionDetails()\n    }\n}\n","import secp256k1 from \"bcrypto/lib/secp256k1.js\";\nimport BcoinPrimitives from \"bcoin/lib/primitives/index.js\";\nimport BcoinScript from \"bcoin/lib/script/index.js\";\nimport BcryptoSignature from \"bcrypto/lib/internal/signature.js\";\nimport bcoin from \"bcoin/lib/bcoin-browser.js\";\n\nimport { BitcoinSPV } from \"./lib/BitcoinSPV.js\";\nimport { BitcoinTxParser } from \"./lib/BitcoinTxParser.js\";\nimport ElectrumClient from \"./lib/ElectrumClient.js\";\nconst { KeyRing } = BcoinPrimitives;\nconst { Script } = BcoinScript;\n\n/**\n * Found transaction details.\n * @typedef FoundTransaction\n * @type {Object}\n * @property {string} transactionID Transaction ID.\n * @property {number} outputPosition Position of output in the transaction.\n * @property {number} value Value of the output (satoshis).\n */\n\nconst BitcoinHelpers = {\n  electrumConfig: null,\n  /**\n   * Updates the config to use for Electrum client connections. Electrum is\n   * the core mechanism used to interact with the Bitcoin blockchain.\n   *\n   * @param {ElectrumConfig} newConfig The config to use for future Electrum\n   *        connections.\n   */\n  setElectrumConfig: function(newConfig) {\n    BitcoinHelpers.electrumConfig = newConfig;\n  },\n\n  /**\n   * Converts signature provided as `r` and `s` values to a bitcoin signature\n   * encoded to the DER format:\n   *   30 <length total> 02 <length r> <r (BE)> 02 <length s> <s (BE)>\n   * It also checks `s` value and converts it to a low value if necessary as per\n   * [BIP-0062](https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki#low-s-values-in-signatures).\n   *\n   * @param {string} r A signature's `r` value in hexadecimal format.\n   * @param {string} s A signature's `s` value in hexadecimal format.\n   *\n   * @return {Buffer} The signature in the DER format.\n   */\n  signatureDER: function(r, s) {\n    const size = secp256k1.size;\n    const signature = new BcryptoSignature(\n      size,\n      Buffer.from(r, \"hex\"),\n      Buffer.from(s, \"hex\")\n    );\n\n    // Verifies if either of `r` or `s` values equals zero or is greater or equal\n    // curve's order. If so throws an error.\n    // Checks if `s` is a high value. As per BIP-0062 signature's `s` value should\n    // be in a low half of curve's order. If it's a high value it's converted to\n    // `-s`.\n    // Checks `s` per BIP-62: signature's `s` value should be in a low half of\n    // curve's order. If it's not, it's converted to `-s`.\n    const bitcoinSignature = secp256k1.signatureNormalize(\n      signature.encode(size)\n    );\n\n    return BcryptoSignature.toDER(bitcoinSignature, size);\n  },\n  /**\n   * Takes the x and y coordinates of a public key point and returns a\n   * hexadecimal representation of 64-byte concatenation of x and y\n   * coordinates.\n   *\n   * @param {string} publicKeyX A hex public key X coordinate.\n   * @param {string} publicKeyY A hex public key Y coordinate.\n   */\n  publicKeyPointToPublicKeyString: function(publicKeyX, publicKeyY) {\n    return `${publicKeyX.replace(\"0x\", \"\")}${publicKeyY.replace(\"0x\", \"\")}`;\n  },\n  Address: {\n    pubKeyHashFrom: function(address) {\n      const script = bcoin.Script.fromAddress(address);\n      return script.getWitnessPubkeyhash();\n    },\n    publicKeyPointToP2WPKHAddress: function(\n      publicKeyX,\n      publicKeyY,\n      bitcoinNetwork\n    ) {\n      return this.publicKeyToP2WPKHAddress(\n        BitcoinHelpers.publicKeyPointToPublicKeyString(publicKeyX, publicKeyY),\n        bitcoinNetwork\n      );\n    },\n    /**\n     * Converts the specified `pubKeyHash` to a valid Bech32 address for\n     * the specified `network`.\n     *\n     * @param {string} pubKeyHash A pubKeyHash as a string.\n     * @param {string} network The Bitcoin network for the Bech32 address.\n     *\n     * @return {string} A Bech32 address to\n     */\n    pubKeyHashToBech32: function(pubKeyHash, network) {\n      return Script.fromProgram(0, Buffer.from(pubKeyHash, \"hex\"))\n        .getAddress()\n        .toBech32(network);\n    },\n    /**\n     * Converts public key to bitcoin Witness Public Key Hash Address according to\n     * [BIP-173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki).\n     * @param {string} publicKeyString Public key as a hexadecimal representation of\n     * 64-byte concatenation of x and y coordinates.\n     * @param {Network} network Network for which address has to be calculated.\n     * @return {string} A Bitcoin P2WPKH address for given network.\n     */\n    publicKeyToP2WPKHAddress: function(publicKeyString, network) {\n      const publicKeyBytes = Buffer.from(publicKeyString, \"hex\");\n\n      // Witness program requires usage of compressed public keys.\n      const compress = true;\n\n      const publicKey = secp256k1.publicKeyImport(publicKeyBytes, compress);\n      const keyRing = KeyRing.fromKey(publicKey, compress);\n      const p2wpkhScript = Script.fromProgram(0, keyRing.getKeyHash());\n\n      // Serialize address to a format specific to given network.\n      return p2wpkhScript.getAddress().toString(network);\n    },\n    /**\n     * Converts a Bitcoin ScriptPubKey address string to a hex script\n     * string.\n     *\n     * @param {string} address A Bitcoin address.\n     *\n     * @return {string} A Bitcoin script for the given address.\n     */\n    toScript: function(address) {\n      return Script.fromAddress(address)\n        .toRaw()\n        .toString(\"hex\");\n    }\n  },\n  /**\n   *\n   * @param {(ElectrumClient)=>Promise<any>} block A function to execute with\n   *        the ElectrumClient passed in; it is expected to return a Promise\n   *        that will resolve once the function is finished performing work\n   *        with the client. withElectrumClient returns that promise, but also\n   *        ensures that the client will be closed once the promise completes\n   *        (successfully or unsuccessfully).\n   */\n  withElectrumClient: async function(block) {\n    const electrumClient = new ElectrumClient(\n      BitcoinHelpers.electrumConfig.testnetWS\n    );\n\n    await electrumClient.connect();\n\n    const result = block(electrumClient);\n    result.then(\n      () => {\n        electrumClient.close();\n      },\n      () => {\n        electrumClient.close();\n      }\n    );\n\n    return result;\n  },\n  Transaction: {\n    /**\n     * Finds a transaction to the given `bitcoinAddress` of the given\n     * `expectedValue`. If there is more than one such transaction, returns\n     * the most recent one.\n     *\n     * @param {string} bitcoinAddress A receiving Bitcoin address.\n     * @param {number} expectedValue The expected value of the transaction\n     *        to fetch.\n     *\n     * @return {Promise<FoundTransaction>} A promise to an object of\n     *         transactionID, outputPosition, and value, that resolves with\n     *         either null if such a transaction could not be found, or the\n     *         information about the transaction that was found.\n     */\n    find: async function(bitcoinAddress, expectedValue) {\n      const script = BitcoinHelpers.Address.toScript(bitcoinAddress);\n\n      return await BitcoinHelpers.withElectrumClient(electrumClient => {\n        return BitcoinHelpers.Transaction.findWithClient(\n          electrumClient,\n          script,\n          expectedValue\n        );\n      });\n    },\n    /**\n     * Watches the Bitcoin chain for a transaction of value `expectedValue`\n     * to address `bitcoinAddress`.\n     *\n     * @param {string} bitcoinAddress Bitcoin address to watch.\n     * @param {number} expectedValue The expected value to watch for.\n     *\n     * @return {Promise<FoundTransaction>} A promise to the found\n     *         transaction once it is seen on the chain.\n     */\n    findOrWaitFor: async function(bitcoinAddress, expectedValue) {\n      return await BitcoinHelpers.withElectrumClient(async electrumClient => {\n        const script = BitcoinHelpers.Address.toScript(bitcoinAddress);\n\n        // This function is used as a callback to electrum client. It is\n        // invoked when an existing or a new transaction is found.\n        const checkTransactions = async function(status) {\n          // If the status is set, transactions were seen for the\n          // script.\n          if (status) {\n            const result = BitcoinHelpers.Transaction.findWithClient(\n              electrumClient,\n              script,\n              expectedValue\n            );\n\n            return result;\n          }\n        };\n\n        return electrumClient.onTransactionToScript(script, checkTransactions);\n      });\n    },\n    /**\n     * Checks the given Bitcoin `transaction` to ensure it has at least\n     * `requiredConfirmations` on-chain. If it does, resolves the returned\n     * promise with the current number of on-chain confirmations. If it does\n     * not, fulfills the promise with `null`.\n     *\n     * @param {FoundTransaction} transaction A transaction object whose\n     *        confirmations will be checked.\n     * @param {number} requiredConfirmations A number of required\n     *        confirmations below which this function will return null.\n     *\n     * @return {Promise<number>} A promise to the current number of\n     *         confirmations for the given `transaction`, iff that transaction has\n     *         at least `requiredConfirmations` confirmations.\n     */\n    checkForConfirmations: async function(transaction, requiredConfirmations) {\n      const id = transaction.transactionID;\n\n      return BitcoinHelpers.withElectrumClient(async electrumClient => {\n        return await BitcoinHelpers.Transaction.checkForConfirmationsWithClient(\n          electrumClient,\n          id,\n          requiredConfirmations\n        );\n      });\n    },\n    /**\n     * Watches the Bitcoin chain until the given `transaction` has the given\n     * number of `requiredConfirmations`.\n     *\n     * @param {Transaction} transaction Transaction object from Electrum.\n     * @param {number} requiredConfirmations The number of required\n     *        confirmations to wait before returning.\n     *\n     * @return A promise to the final number of confirmations observed that\n     *         was at least equal to the required confirmations.\n     */\n    waitForConfirmations: async function(transaction, requiredConfirmations) {\n      const id = transaction.transactionID;\n\n      return BitcoinHelpers.withElectrumClient(async electrumClient => {\n        const checkConfirmations = async function() {\n          return await BitcoinHelpers.Transaction.checkForConfirmationsWithClient(\n            electrumClient,\n            id,\n            requiredConfirmations\n          );\n        };\n\n        return electrumClient.onNewBlock(checkConfirmations);\n      });\n    },\n    /**\n     * Estimates the fee that would be needed for a given transaction.\n     *\n     * @warning This is a stub. Currently it takes the TBTCConstants\n     *          contract and returns its reported minimum fee, rather than\n     *          calling electrumClient.blockchainEstimateFee.\n     */\n    estimateFee: async function(tbtcConstantsContract) {\n      return tbtcConstantsContract.getMinimumRedemptionFee();\n    },\n    /**\n     * Takes a raw hexadecimal Bitcoin transaction and returns a parsed\n     * version with relevant properties.\n     *\n     * @param {string} rawTransaction Raw Bitcoin transaction in hexadecimal\n     *        format.\n     */\n    parseRaw: function(rawTransaction) {\n      return BitcoinTxParser.parse(rawTransaction);\n    },\n    /**\n     * For the given `transactionID`, constructs an SPV proof that proves it\n     * has at least `confirmations` confirmations on the Bitcoin chain.\n     * Returns data for this proof, as well as the parsed Bitcoin\n     * transaction data.\n     *\n     * @param {string} transactionID A hex Bitcoin transaction id hash.\n     * @param {number} confirmations The number of confirmations to include\n     *        in the proof.\n     *\n     * @return The proof data, plus the parsed transaction for the proof.\n     */\n    getSPVProof: async function(transactionID, confirmations) {\n      return await BitcoinHelpers.withElectrumClient(async electrumClient => {\n        const spv = new BitcoinSPV(electrumClient);\n        const proof = await spv.getTransactionProof(\n          transactionID,\n          confirmations\n        );\n\n        return {\n          ...proof,\n          parsedTransaction: BitcoinHelpers.Transaction.parseRaw(proof.tx)\n        };\n      });\n    },\n    /**\n     * Broadcasts the given signed transaction to the Bitcoin chain.\n     *\n     * @param {string} signedTransaction The signed transaction in\n     *        hexadecimal format.\n     *\n     * @return {Promise<FoundTransaction>} A partial FoundTransaction with\n     *         the transactionID field set.\n     */\n    broadcast: async function(signedTransaction) {\n      return await BitcoinHelpers.withElectrumClient(async electrumClient => {\n        const transactionID = await electrumClient.broadcastTransaction(\n          signedTransaction\n        );\n\n        return {\n          transactionID: transactionID\n        };\n      });\n    },\n    /**\n     * Adds a witness signature for an input in a transaction.\n     *\n     * @param {string} unsignedTransaction Unsigned raw bitcoin transaction\n     *        in hexadecimal format.\n     * @param {uint32} inputIndex Index number of input to be signed.\n     * @param {string} r Signature's `r` value in hexadecimal format.\n     * @param {string} s Signature's `s` value in hexadecimal format.\n     * @param {string} publicKey 64-byte signer's public key's concatenated\n     *        x and y coordinates in hexadecimal format.\n     *\n     * @return {string} Raw transaction in a hexadecimal format with witness\n     *         signature.\n     */\n    addWitnessSignature: function(\n      unsignedTransaction,\n      inputIndex,\n      r,\n      s,\n      publicKey\n    ) {\n      // Signature\n      let signatureDER;\n      try {\n        signatureDER = BitcoinHelpers.signatureDER(r, s);\n      } catch (err) {\n        throw new Error(`failed to convert signature to DER format: [${err}]`);\n      }\n\n      const hashType = Buffer.from([bcoin.Script.hashType.ALL]);\n      const sig = Buffer.concat([signatureDER, hashType]);\n\n      // Public Key\n      let compressedPublicKey;\n      try {\n        const publicKeyBytes = Buffer.from(publicKey, \"hex\");\n        compressedPublicKey = secp256k1.publicKeyImport(publicKeyBytes, true);\n      } catch (err) {\n        throw new Error(`failed to import public key: [${err}]`);\n      }\n\n      // Combine witness\n      let signedTransaction;\n      try {\n        signedTransaction = bcoin.TX.fromRaw(\n          unsignedTransaction,\n          \"hex\"\n        ).clone();\n      } catch (err) {\n        throw new Error(`failed to import transaction: [${err}]`);\n      }\n\n      signedTransaction.inputs[inputIndex].witness.fromItems([\n        sig,\n        compressedPublicKey\n      ]);\n\n      return signedTransaction.toRaw().toString(\"hex\");\n    },\n    /**\n     * Constructs a Bitcoin SegWit transaction with one input and one\n     * output. Difference between previous output's value and current's\n     * output value will be taken as a transaction fee.\n     *\n     * @param {string} previousOutpoint Previous transaction's output to be\n     *        used as an input. Provided in hexadecimal format, consists of\n     *        32-byte transaction ID and 4-byte output index number.\n     * @param {uint32} inputSequence Input's sequence number. As per\n     *        BIP-125 the value is used to indicate that transaction should\n     *        be able to be replaced in the future. If input sequence is set\n     *        to `0xffffffff` the transaction won't be replaceable.\n     * @param {number} outputValue Value for the output.\n     * @param {string} outputPKH Public Key Hash for the output.\n     *\n     * @return {string} Raw bitcoin transaction in hexadecimal format.\n     */\n    constructOneInputOneOutputWitnessTransaction(\n      previousOutpoint,\n      inputSequence,\n      outputValue,\n      outputPKH\n    ) {\n      // Input\n      const prevOutpoint = bcoin.Outpoint.fromRaw(\n        Buffer.from(previousOutpoint, \"hex\")\n      );\n\n      const input = bcoin.Input.fromOptions({\n        prevout: prevOutpoint,\n        sequence: inputSequence\n      });\n\n      // Output\n      // TODO: When we want to give user a possibility to provide an address instead\n      // of a public key hash we need to change it to `fromAddress`.\n      const outputScript = bcoin.Script.fromProgram(\n        0, // Witness program version\n        Buffer.from(outputPKH, \"hex\")\n      );\n\n      const output = bcoin.Output.fromOptions({\n        value: outputValue,\n        script: outputScript\n      });\n\n      // Transaction\n      const transaction = bcoin.TX.fromOptions({\n        inputs: [input],\n        outputs: [output]\n      });\n\n      return transaction.toRaw().toString(\"hex\");\n    },\n\n    // Raw helpers.\n    /**\n     * Finds a transaction to the given `receiverScript` of the given\n     * `expectedValue` using the given `electrumClient`. If there is more\n     * than one such transaction, returns the most recent one.\n     *\n     * @param {ElectrumClient} electrumClient An already-initialized Electrum client.\n     * @param {string} receiverScript A receiver script.\n     * @param {number} expectedValue The expected value of the transaction\n     *        to fetch.\n     *\n     * @return {Promise<FoundTransaction>} A promise to an object of\n     *         transactionID, outputPosition, and value, that resolves with\n     *         either null if such a transaction could not be found, or the\n     *         information about the transaction that was found.\n     */\n    findWithClient: async function(\n      electrumClient,\n      receiverScript,\n      expectedValue\n    ) {\n      const unspentTransactions = await electrumClient.getUnspentToScript(\n        receiverScript\n      );\n\n      for (const tx of unspentTransactions.reverse()) {\n        if (tx.value == expectedValue) {\n          return {\n            transactionID: tx.tx_hash,\n            outputPosition: tx.tx_pos,\n            value: tx.value\n          };\n        }\n      }\n    },\n    checkForConfirmationsWithClient: async function(\n      electrumClient,\n      transactionID,\n      requiredConfirmations\n    ) {\n      const { confirmations } = await electrumClient.getTransaction(\n        transactionID\n      );\n      if (confirmations >= requiredConfirmations) {\n        return confirmations;\n      }\n    }\n  }\n};\n\nexport default BitcoinHelpers;\n"],"sourceRoot":""}